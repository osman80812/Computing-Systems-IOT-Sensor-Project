
/Users/bilalosman/Documents/Particle-Workbench/EE1301finalproject/target/2.0.1/photon/EE1301finalproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000019d4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a19f0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a19f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004ec  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1a64  080a1a64  00021a64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1a8c  080a1a8c  00021a8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f8384  00000000  00000000  00021a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012edc  00000000  00000000  00119e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000194e2  00000000  00000000  0012ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001f28  00000000  00000000  001461d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004e00  00000000  00000000  001480fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025889  00000000  00000000  0014cefa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00029b57  00000000  00000000  00172783  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b13c5  00000000  00000000  0019c2da  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004e90  00000000  00000000  0024d6a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fba1 	bl	80a1774 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fba9 	bl	80a1790 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a19f4 	.word	0x080a19f4
 80a004c:	20000070 	.word	0x20000070
 80a0050:	20000070 	.word	0x20000070
 80a0054:	2000055c 	.word	0x2000055c
 80a0058:	2000055c 	.word	0x2000055c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fa59 	bl	80a1514 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a19d0 	.word	0x080a19d0
 80a0080:	080a19f0 	.word	0x080a19f0

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b844 	b.w	80a0110 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f8fb 	bl	80a0284 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 ba01 	b.w	80a1498 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 baad 	b.w	80a05f4 <malloc>

080a009a <_Znaj>:
 80a009a:	f000 baab 	b.w	80a05f4 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 bab1 	b.w	80a0604 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z14motionDetectedPKcS0_>:

//photon LED configuration
int calibrateTime = 5000;    

//string publisher
void motionDetected(const char *event, const char *data){
 80a00b4:	b508      	push	{r3, lr}
  Serial.print("INTRUDER ALERT!");
 80a00b6:	f001 f8a3 	bl	80a1200 <_Z16_fetch_usbserialv>
}
 80a00ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.print("INTRUDER ALERT!");
 80a00be:	4901      	ldr	r1, [pc, #4]	; (80a00c4 <_Z14motionDetectedPKcS0_+0x10>)
 80a00c0:	f000 bed2 	b.w	80a0e68 <_ZN5Print5printEPKc>
 80a00c4:	080a1844 	.word	0x080a1844

080a00c8 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a00c8:	b513      	push	{r0, r1, r4, lr}
 80a00ca:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a00cc:	4b04      	ldr	r3, [pc, #16]	; (80a00e0 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
 80a00ce:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a00d0:	f88d 3000 	strb.w	r3, [sp]
 80a00d4:	233c      	movs	r3, #60	; 0x3c
 80a00d6:	f000 fc1b 	bl	80a0910 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
 80a00da:	4620      	mov	r0, r4
 80a00dc:	b002      	add	sp, #8
 80a00de:	bd10      	pop	{r4, pc}
 80a00e0:	20000074 	.word	0x20000074

080a00e4 <_Z11intruderLOGPKcS0_>:

void intruderLOG(const char *event, const char *data){
 80a00e4:	b538      	push	{r3, r4, r5, lr}
  Serial.print(sensIR);
 80a00e6:	f001 f88b 	bl	80a1200 <_Z16_fetch_usbserialv>
 80a00ea:	4b08      	ldr	r3, [pc, #32]	; (80a010c <_Z11intruderLOGPKcS0_+0x28>)
 80a00ec:	4605      	mov	r5, r0
 80a00ee:	681c      	ldr	r4, [r3, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a00f0:	2c00      	cmp	r4, #0
 80a00f2:	da09      	bge.n	80a0108 <_Z11intruderLOGPKcS0_+0x24>
            t = print('-');
 80a00f4:	212d      	movs	r1, #45	; 0x2d
 80a00f6:	f000 febb 	bl	80a0e70 <_ZN5Print5printEc>
            val = -n;
 80a00fa:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a00fc:	4628      	mov	r0, r5
}
 80a00fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0102:	220a      	movs	r2, #10
 80a0104:	f000 beb7 	b.w	80a0e76 <_ZN5Print11printNumberEmh>
            val = n;
 80a0108:	4621      	mov	r1, r4
 80a010a:	e7f7      	b.n	80a00fc <_Z11intruderLOGPKcS0_+0x18>
 80a010c:	2000007c 	.word	0x2000007c

080a0110 <setup>:

//setup for circuit
void setup() {
 80a0110:	b537      	push	{r0, r1, r2, r4, r5, lr}
        return spark_subscribe(eventName, handler, NULL, MY_DEVICES, deviceID, NULL);
 80a0112:	2400      	movs	r4, #0
  pinMode(ledPin, OUTPUT);
 80a0114:	4b0e      	ldr	r3, [pc, #56]	; (80a0150 <setup+0x40>)
 80a0116:	2101      	movs	r1, #1
 80a0118:	8818      	ldrh	r0, [r3, #0]
 80a011a:	f001 fa7b 	bl	80a1614 <pinMode>
  pinMode(inPin, INPUT);
 80a011e:	4b0d      	ldr	r3, [pc, #52]	; (80a0154 <setup+0x44>)
 80a0120:	4d0d      	ldr	r5, [pc, #52]	; (80a0158 <setup+0x48>)
 80a0122:	8818      	ldrh	r0, [r3, #0]
 80a0124:	2100      	movs	r1, #0
 80a0126:	f001 fa75 	bl	80a1614 <pinMode>
 80a012a:	4623      	mov	r3, r4
 80a012c:	4622      	mov	r2, r4
 80a012e:	490b      	ldr	r1, [pc, #44]	; (80a015c <setup+0x4c>)
 80a0130:	9401      	str	r4, [sp, #4]
 80a0132:	9500      	str	r5, [sp, #0]
 80a0134:	480a      	ldr	r0, [pc, #40]	; (80a0160 <setup+0x50>)
 80a0136:	f000 f9fd 	bl	80a0534 <spark_subscribe>
 80a013a:	4623      	mov	r3, r4
 80a013c:	4622      	mov	r2, r4
 80a013e:	e9cd 5400 	strd	r5, r4, [sp]
 80a0142:	4908      	ldr	r1, [pc, #32]	; (80a0164 <setup+0x54>)
 80a0144:	4808      	ldr	r0, [pc, #32]	; (80a0168 <setup+0x58>)
 80a0146:	f000 f9f5 	bl	80a0534 <spark_subscribe>
  //sets a log for the times someone has walked near the sensor
  Particle.subscribe("intruder_log", motionDetected, "430028000447363339343638");
  //sends message of the time room was breached
  Particle.subscribe("intruder_alert", intruderLOG, "430028000447363339343638");
}
 80a014a:	b003      	add	sp, #12
 80a014c:	bd30      	pop	{r4, r5, pc}
 80a014e:	bf00      	nop
 80a0150:	20000004 	.word	0x20000004
 80a0154:	20000078 	.word	0x20000078
 80a0158:	080a1861 	.word	0x080a1861
 80a015c:	080a00b5 	.word	0x080a00b5
 80a0160:	080a1854 	.word	0x080a1854
 80a0164:	080a00e5 	.word	0x080a00e5
 80a0168:	080a187a 	.word	0x080a187a

080a016c <_Z10readSensorv>:
    readSensor();
    reportData();
  }
}

void readSensor() {
 80a016c:	b508      	push	{r3, lr}
  val = digitalRead(inPin);
 80a016e:	4b03      	ldr	r3, [pc, #12]	; (80a017c <_Z10readSensorv+0x10>)
 80a0170:	8818      	ldrh	r0, [r3, #0]
 80a0172:	f001 fa79 	bl	80a1668 <digitalRead>
 80a0176:	4b02      	ldr	r3, [pc, #8]	; (80a0180 <_Z10readSensorv+0x14>)
 80a0178:	6018      	str	r0, [r3, #0]
}
 80a017a:	bd08      	pop	{r3, pc}
 80a017c:	20000078 	.word	0x20000078
 80a0180:	20000080 	.word	0x20000080

080a0184 <_Z10calibratedv>:

bool calibrated() {
 80a0184:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0186:	f000 f8a7 	bl	80a02d8 <HAL_Timer_Get_Milli_Seconds>
  return millis() - calibrateTime > 0;
 80a018a:	4b03      	ldr	r3, [pc, #12]	; (80a0198 <_Z10calibratedv+0x14>)
 80a018c:	681b      	ldr	r3, [r3, #0]
}
 80a018e:	1a18      	subs	r0, r3, r0
 80a0190:	bf18      	it	ne
 80a0192:	2001      	movne	r0, #1
 80a0194:	bd08      	pop	{r3, pc}
 80a0196:	bf00      	nop
 80a0198:	20000000 	.word	0x20000000

080a019c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a019c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a019e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a01a0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a01a2:	b17c      	cbz	r4, 80a01c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a01a4:	6863      	ldr	r3, [r4, #4]
 80a01a6:	3b01      	subs	r3, #1
 80a01a8:	6063      	str	r3, [r4, #4]
 80a01aa:	b95b      	cbnz	r3, 80a01c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a01ac:	6823      	ldr	r3, [r4, #0]
 80a01ae:	4620      	mov	r0, r4
 80a01b0:	689b      	ldr	r3, [r3, #8]
 80a01b2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a01b4:	68a3      	ldr	r3, [r4, #8]
 80a01b6:	3b01      	subs	r3, #1
 80a01b8:	60a3      	str	r3, [r4, #8]
 80a01ba:	b91b      	cbnz	r3, 80a01c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a01bc:	6823      	ldr	r3, [r4, #0]
 80a01be:	4620      	mov	r0, r4
 80a01c0:	68db      	ldr	r3, [r3, #12]
 80a01c2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a01c4:	4628      	mov	r0, r5
 80a01c6:	bd38      	pop	{r3, r4, r5, pc}

080a01c8 <_Z10reportDatav>:

void reportData() {
 80a01c8:	b570      	push	{r4, r5, r6, lr}
  if (val == HIGH) {
 80a01ca:	4b28      	ldr	r3, [pc, #160]	; (80a026c <_Z10reportDatav+0xa4>)
void reportData() {
 80a01cc:	b086      	sub	sp, #24
  if (val == HIGH) {
 80a01ce:	681c      	ldr	r4, [r3, #0]
 80a01d0:	2c01      	cmp	r4, #1
 80a01d2:	d13e      	bne.n	80a0252 <_Z10reportDatav+0x8a>
    sensIR += 10;
 80a01d4:	4e26      	ldr	r6, [pc, #152]	; (80a0270 <_Z10reportDatav+0xa8>)
    digitalWrite(ledPin, HIGH);
 80a01d6:	4d27      	ldr	r5, [pc, #156]	; (80a0274 <_Z10reportDatav+0xac>)
    sensIR += 10;
 80a01d8:	6833      	ldr	r3, [r6, #0]
    digitalWrite(ledPin, HIGH);
 80a01da:	4621      	mov	r1, r4
    sensIR += 10;
 80a01dc:	330a      	adds	r3, #10
    digitalWrite(ledPin, HIGH);
 80a01de:	8828      	ldrh	r0, [r5, #0]
    sensIR += 10;
 80a01e0:	6033      	str	r3, [r6, #0]
    digitalWrite(ledPin, HIGH);
 80a01e2:	f001 fa28 	bl	80a1636 <digitalWrite>
    delay(1000);
 80a01e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a01ea:	f000 fa33 	bl	80a0654 <delay>
    digitalWrite(ledPin, LOW);
 80a01ee:	2100      	movs	r1, #0
 80a01f0:	8828      	ldrh	r0, [r5, #0]
 80a01f2:	f001 fa20 	bl	80a1636 <digitalWrite>
    delay(1000);
 80a01f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a01fa:	f000 fa2b 	bl	80a0654 <delay>
    digitalWrite(ledPin, HIGH);
 80a01fe:	4621      	mov	r1, r4
 80a0200:	8828      	ldrh	r0, [r5, #0]
 80a0202:	f001 fa18 	bl	80a1636 <digitalWrite>
    delay(1000);
 80a0206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a020a:	f000 fa23 	bl	80a0654 <delay>
    digitalWrite(ledPin, LOW);
 80a020e:	2100      	movs	r1, #0
 80a0210:	8828      	ldrh	r0, [r5, #0]
 80a0212:	f001 fa10 	bl	80a1636 <digitalWrite>
    delay(1000);
 80a0216:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a021a:	f000 fa1b 	bl	80a0654 <delay>

    //sends message to cloud
    Particle.publish("intruder_alert", "INTRUDER ALERT!");
 80a021e:	4a16      	ldr	r2, [pc, #88]	; (80a0278 <_Z10reportDatav+0xb0>)
 80a0220:	4916      	ldr	r1, [pc, #88]	; (80a027c <_Z10reportDatav+0xb4>)
 80a0222:	a802      	add	r0, sp, #8
 80a0224:	f7ff ff50 	bl	80a00c8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0228:	a803      	add	r0, sp, #12
 80a022a:	f7ff ffb7 	bl	80a019c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("intruder_log", String(sensIR));
 80a022e:	220a      	movs	r2, #10
 80a0230:	6831      	ldr	r1, [r6, #0]
     if(sensIR > 0){
       sensIR -= 10;
     } else{
        sensIR = 0;
     }
     Particle.publish("intruder_log", String(sensIR));
 80a0232:	a802      	add	r0, sp, #8
 80a0234:	f000 feba 	bl	80a0fac <_ZN6StringC1Eih>
 80a0238:	4668      	mov	r0, sp
 80a023a:	9a02      	ldr	r2, [sp, #8]
 80a023c:	4910      	ldr	r1, [pc, #64]	; (80a0280 <_Z10reportDatav+0xb8>)
 80a023e:	f7ff ff43 	bl	80a00c8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a0242:	a801      	add	r0, sp, #4
 80a0244:	f7ff ffaa 	bl	80a019c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0248:	a802      	add	r0, sp, #8
 80a024a:	f000 fe54 	bl	80a0ef6 <_ZN6StringD1Ev>
    }
}
 80a024e:	b006      	add	sp, #24
 80a0250:	bd70      	pop	{r4, r5, r6, pc}
   else if (val == LOW) { 
 80a0252:	2c00      	cmp	r4, #0
 80a0254:	d1fb      	bne.n	80a024e <_Z10reportDatav+0x86>
     if(sensIR > 0){
 80a0256:	4b06      	ldr	r3, [pc, #24]	; (80a0270 <_Z10reportDatav+0xa8>)
 80a0258:	681a      	ldr	r2, [r3, #0]
 80a025a:	2a00      	cmp	r2, #0
       sensIR -= 10;
 80a025c:	bfc8      	it	gt
 80a025e:	f1a2 040a 	subgt.w	r4, r2, #10
     Particle.publish("intruder_log", String(sensIR));
 80a0262:	4621      	mov	r1, r4
 80a0264:	220a      	movs	r2, #10
 80a0266:	601c      	str	r4, [r3, #0]
 80a0268:	e7e3      	b.n	80a0232 <_Z10reportDatav+0x6a>
 80a026a:	bf00      	nop
 80a026c:	20000080 	.word	0x20000080
 80a0270:	2000007c 	.word	0x2000007c
 80a0274:	20000004 	.word	0x20000004
 80a0278:	080a1844 	.word	0x080a1844
 80a027c:	080a187a 	.word	0x080a187a
 80a0280:	080a1854 	.word	0x080a1854

080a0284 <loop>:
void loop(){
 80a0284:	b508      	push	{r3, lr}
  if (calibrated()){
 80a0286:	f7ff ff7d 	bl	80a0184 <_Z10calibratedv>
 80a028a:	b128      	cbz	r0, 80a0298 <loop+0x14>
    readSensor();
 80a028c:	f7ff ff6e 	bl	80a016c <_Z10readSensorv>
}
 80a0290:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    reportData();
 80a0294:	f7ff bf98 	b.w	80a01c8 <_Z10reportDatav>
}
 80a0298:	bd08      	pop	{r3, pc}
	...

080a029c <_GLOBAL__sub_I_inPin>:
        val_(val) {
 80a029c:	2200      	movs	r2, #0
 80a029e:	4b01      	ldr	r3, [pc, #4]	; (80a02a4 <_GLOBAL__sub_I_inPin+0x8>)
 80a02a0:	701a      	strb	r2, [r3, #0]
}
 80a02a2:	4770      	bx	lr
 80a02a4:	20000074 	.word	0x20000074

080a02a8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a02a8:	b508      	push	{r3, lr}
 80a02aa:	4b02      	ldr	r3, [pc, #8]	; (80a02b4 <os_mutex_recursive_create+0xc>)
 80a02ac:	681b      	ldr	r3, [r3, #0]
 80a02ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a02b0:	9301      	str	r3, [sp, #4]
 80a02b2:	bd08      	pop	{r3, pc}
 80a02b4:	080601d0 	.word	0x080601d0

080a02b8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a02b8:	b508      	push	{r3, lr}
 80a02ba:	4b02      	ldr	r3, [pc, #8]	; (80a02c4 <os_mutex_recursive_destroy+0xc>)
 80a02bc:	681b      	ldr	r3, [r3, #0]
 80a02be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a02c0:	9301      	str	r3, [sp, #4]
 80a02c2:	bd08      	pop	{r3, pc}
 80a02c4:	080601d0 	.word	0x080601d0

080a02c8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a02c8:	b508      	push	{r3, lr}
 80a02ca:	4b02      	ldr	r3, [pc, #8]	; (80a02d4 <HAL_RNG_GetRandomNumber+0xc>)
 80a02cc:	681b      	ldr	r3, [r3, #0]
 80a02ce:	685b      	ldr	r3, [r3, #4]
 80a02d0:	9301      	str	r3, [sp, #4]
 80a02d2:	bd08      	pop	{r3, pc}
 80a02d4:	0806019c 	.word	0x0806019c

080a02d8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a02d8:	b508      	push	{r3, lr}
 80a02da:	4b02      	ldr	r3, [pc, #8]	; (80a02e4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a02dc:	681b      	ldr	r3, [r3, #0]
 80a02de:	695b      	ldr	r3, [r3, #20]
 80a02e0:	9301      	str	r3, [sp, #4]
 80a02e2:	bd08      	pop	{r3, pc}
 80a02e4:	0806019c 	.word	0x0806019c

080a02e8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a02e8:	b508      	push	{r3, lr}
 80a02ea:	4b02      	ldr	r3, [pc, #8]	; (80a02f4 <HAL_Pin_Mode+0xc>)
 80a02ec:	681b      	ldr	r3, [r3, #0]
 80a02ee:	689b      	ldr	r3, [r3, #8]
 80a02f0:	9301      	str	r3, [sp, #4]
 80a02f2:	bd08      	pop	{r3, pc}
 80a02f4:	080601b0 	.word	0x080601b0

080a02f8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a02f8:	b508      	push	{r3, lr}
 80a02fa:	4b02      	ldr	r3, [pc, #8]	; (80a0304 <HAL_Get_Pin_Mode+0xc>)
 80a02fc:	681b      	ldr	r3, [r3, #0]
 80a02fe:	68db      	ldr	r3, [r3, #12]
 80a0300:	9301      	str	r3, [sp, #4]
 80a0302:	bd08      	pop	{r3, pc}
 80a0304:	080601b0 	.word	0x080601b0

080a0308 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0308:	b508      	push	{r3, lr}
 80a030a:	4b02      	ldr	r3, [pc, #8]	; (80a0314 <HAL_GPIO_Write+0xc>)
 80a030c:	681b      	ldr	r3, [r3, #0]
 80a030e:	691b      	ldr	r3, [r3, #16]
 80a0310:	9301      	str	r3, [sp, #4]
 80a0312:	bd08      	pop	{r3, pc}
 80a0314:	080601b0 	.word	0x080601b0

080a0318 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0318:	b508      	push	{r3, lr}
 80a031a:	4b02      	ldr	r3, [pc, #8]	; (80a0324 <HAL_GPIO_Read+0xc>)
 80a031c:	681b      	ldr	r3, [r3, #0]
 80a031e:	695b      	ldr	r3, [r3, #20]
 80a0320:	9301      	str	r3, [sp, #4]
 80a0322:	bd08      	pop	{r3, pc}
 80a0324:	080601b0 	.word	0x080601b0

080a0328 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0328:	b508      	push	{r3, lr}
 80a032a:	4b02      	ldr	r3, [pc, #8]	; (80a0334 <hal_i2c_write+0xc>)
 80a032c:	681b      	ldr	r3, [r3, #0]
 80a032e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0330:	9301      	str	r3, [sp, #4]
 80a0332:	bd08      	pop	{r3, pc}
 80a0334:	080601ac 	.word	0x080601ac

080a0338 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0338:	b508      	push	{r3, lr}
 80a033a:	4b02      	ldr	r3, [pc, #8]	; (80a0344 <hal_i2c_available+0xc>)
 80a033c:	681b      	ldr	r3, [r3, #0]
 80a033e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0340:	9301      	str	r3, [sp, #4]
 80a0342:	bd08      	pop	{r3, pc}
 80a0344:	080601ac 	.word	0x080601ac

080a0348 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0348:	b508      	push	{r3, lr}
 80a034a:	4b02      	ldr	r3, [pc, #8]	; (80a0354 <hal_i2c_read+0xc>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0350:	9301      	str	r3, [sp, #4]
 80a0352:	bd08      	pop	{r3, pc}
 80a0354:	080601ac 	.word	0x080601ac

080a0358 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0358:	b508      	push	{r3, lr}
 80a035a:	4b02      	ldr	r3, [pc, #8]	; (80a0364 <hal_i2c_peek+0xc>)
 80a035c:	681b      	ldr	r3, [r3, #0]
 80a035e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0360:	9301      	str	r3, [sp, #4]
 80a0362:	bd08      	pop	{r3, pc}
 80a0364:	080601ac 	.word	0x080601ac

080a0368 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0368:	b508      	push	{r3, lr}
 80a036a:	4b02      	ldr	r3, [pc, #8]	; (80a0374 <hal_i2c_flush+0xc>)
 80a036c:	681b      	ldr	r3, [r3, #0]
 80a036e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0370:	9301      	str	r3, [sp, #4]
 80a0372:	bd08      	pop	{r3, pc}
 80a0374:	080601ac 	.word	0x080601ac

080a0378 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0378:	b508      	push	{r3, lr}
 80a037a:	4b02      	ldr	r3, [pc, #8]	; (80a0384 <hal_i2c_is_enabled+0xc>)
 80a037c:	681b      	ldr	r3, [r3, #0]
 80a037e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0380:	9301      	str	r3, [sp, #4]
 80a0382:	bd08      	pop	{r3, pc}
 80a0384:	080601ac 	.word	0x080601ac

080a0388 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0388:	b508      	push	{r3, lr}
 80a038a:	4b03      	ldr	r3, [pc, #12]	; (80a0398 <hal_i2c_init+0x10>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0392:	9301      	str	r3, [sp, #4]
 80a0394:	bd08      	pop	{r3, pc}
 80a0396:	0000      	.short	0x0000
 80a0398:	080601ac 	.word	0x080601ac

080a039c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a039c:	b508      	push	{r3, lr}
 80a039e:	4b02      	ldr	r3, [pc, #8]	; (80a03a8 <hal_spi_init+0xc>)
 80a03a0:	681b      	ldr	r3, [r3, #0]
 80a03a2:	69db      	ldr	r3, [r3, #28]
 80a03a4:	9301      	str	r3, [sp, #4]
 80a03a6:	bd08      	pop	{r3, pc}
 80a03a8:	080601b4 	.word	0x080601b4

080a03ac <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a03ac:	b508      	push	{r3, lr}
 80a03ae:	4b02      	ldr	r3, [pc, #8]	; (80a03b8 <hal_spi_is_enabled+0xc>)
 80a03b0:	681b      	ldr	r3, [r3, #0]
 80a03b2:	6a1b      	ldr	r3, [r3, #32]
 80a03b4:	9301      	str	r3, [sp, #4]
 80a03b6:	bd08      	pop	{r3, pc}
 80a03b8:	080601b4 	.word	0x080601b4

080a03bc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a03bc:	b508      	push	{r3, lr}
 80a03be:	4b02      	ldr	r3, [pc, #8]	; (80a03c8 <hal_usart_init+0xc>)
 80a03c0:	681b      	ldr	r3, [r3, #0]
 80a03c2:	699b      	ldr	r3, [r3, #24]
 80a03c4:	9301      	str	r3, [sp, #4]
 80a03c6:	bd08      	pop	{r3, pc}
 80a03c8:	080601c4 	.word	0x080601c4

080a03cc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a03cc:	b508      	push	{r3, lr}
 80a03ce:	4b02      	ldr	r3, [pc, #8]	; (80a03d8 <hal_usart_write+0xc>)
 80a03d0:	681b      	ldr	r3, [r3, #0]
 80a03d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a03d4:	9301      	str	r3, [sp, #4]
 80a03d6:	bd08      	pop	{r3, pc}
 80a03d8:	080601c4 	.word	0x080601c4

080a03dc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a03dc:	b508      	push	{r3, lr}
 80a03de:	4b02      	ldr	r3, [pc, #8]	; (80a03e8 <hal_usart_available+0xc>)
 80a03e0:	681b      	ldr	r3, [r3, #0]
 80a03e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a03e4:	9301      	str	r3, [sp, #4]
 80a03e6:	bd08      	pop	{r3, pc}
 80a03e8:	080601c4 	.word	0x080601c4

080a03ec <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a03ec:	b508      	push	{r3, lr}
 80a03ee:	4b02      	ldr	r3, [pc, #8]	; (80a03f8 <hal_usart_read+0xc>)
 80a03f0:	681b      	ldr	r3, [r3, #0]
 80a03f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a03f4:	9301      	str	r3, [sp, #4]
 80a03f6:	bd08      	pop	{r3, pc}
 80a03f8:	080601c4 	.word	0x080601c4

080a03fc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a03fc:	b508      	push	{r3, lr}
 80a03fe:	4b02      	ldr	r3, [pc, #8]	; (80a0408 <hal_usart_peek+0xc>)
 80a0400:	681b      	ldr	r3, [r3, #0]
 80a0402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0404:	9301      	str	r3, [sp, #4]
 80a0406:	bd08      	pop	{r3, pc}
 80a0408:	080601c4 	.word	0x080601c4

080a040c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a040c:	b508      	push	{r3, lr}
 80a040e:	4b02      	ldr	r3, [pc, #8]	; (80a0418 <hal_usart_flush+0xc>)
 80a0410:	681b      	ldr	r3, [r3, #0]
 80a0412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0414:	9301      	str	r3, [sp, #4]
 80a0416:	bd08      	pop	{r3, pc}
 80a0418:	080601c4 	.word	0x080601c4

080a041c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a041c:	b508      	push	{r3, lr}
 80a041e:	4b02      	ldr	r3, [pc, #8]	; (80a0428 <hal_usart_is_enabled+0xc>)
 80a0420:	681b      	ldr	r3, [r3, #0]
 80a0422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0424:	9301      	str	r3, [sp, #4]
 80a0426:	bd08      	pop	{r3, pc}
 80a0428:	080601c4 	.word	0x080601c4

080a042c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a042c:	b508      	push	{r3, lr}
 80a042e:	4b02      	ldr	r3, [pc, #8]	; (80a0438 <hal_usart_available_data_for_write+0xc>)
 80a0430:	681b      	ldr	r3, [r3, #0]
 80a0432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0434:	9301      	str	r3, [sp, #4]
 80a0436:	bd08      	pop	{r3, pc}
 80a0438:	080601c4 	.word	0x080601c4

080a043c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a043c:	b508      	push	{r3, lr}
 80a043e:	4b02      	ldr	r3, [pc, #8]	; (80a0448 <HAL_USB_USART_Init+0xc>)
 80a0440:	681b      	ldr	r3, [r3, #0]
 80a0442:	681b      	ldr	r3, [r3, #0]
 80a0444:	9301      	str	r3, [sp, #4]
 80a0446:	bd08      	pop	{r3, pc}
 80a0448:	080601d8 	.word	0x080601d8

080a044c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a044c:	b508      	push	{r3, lr}
 80a044e:	4b02      	ldr	r3, [pc, #8]	; (80a0458 <HAL_USB_USART_Available_Data+0xc>)
 80a0450:	681b      	ldr	r3, [r3, #0]
 80a0452:	691b      	ldr	r3, [r3, #16]
 80a0454:	9301      	str	r3, [sp, #4]
 80a0456:	bd08      	pop	{r3, pc}
 80a0458:	080601d8 	.word	0x080601d8

080a045c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a045c:	b508      	push	{r3, lr}
 80a045e:	4b02      	ldr	r3, [pc, #8]	; (80a0468 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0460:	681b      	ldr	r3, [r3, #0]
 80a0462:	695b      	ldr	r3, [r3, #20]
 80a0464:	9301      	str	r3, [sp, #4]
 80a0466:	bd08      	pop	{r3, pc}
 80a0468:	080601d8 	.word	0x080601d8

080a046c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a046c:	b508      	push	{r3, lr}
 80a046e:	4b02      	ldr	r3, [pc, #8]	; (80a0478 <HAL_USB_USART_Receive_Data+0xc>)
 80a0470:	681b      	ldr	r3, [r3, #0]
 80a0472:	699b      	ldr	r3, [r3, #24]
 80a0474:	9301      	str	r3, [sp, #4]
 80a0476:	bd08      	pop	{r3, pc}
 80a0478:	080601d8 	.word	0x080601d8

080a047c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a047c:	b508      	push	{r3, lr}
 80a047e:	4b02      	ldr	r3, [pc, #8]	; (80a0488 <HAL_USB_USART_Send_Data+0xc>)
 80a0480:	681b      	ldr	r3, [r3, #0]
 80a0482:	69db      	ldr	r3, [r3, #28]
 80a0484:	9301      	str	r3, [sp, #4]
 80a0486:	bd08      	pop	{r3, pc}
 80a0488:	080601d8 	.word	0x080601d8

080a048c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a048c:	b508      	push	{r3, lr}
 80a048e:	4b02      	ldr	r3, [pc, #8]	; (80a0498 <HAL_USB_USART_Flush_Data+0xc>)
 80a0490:	681b      	ldr	r3, [r3, #0]
 80a0492:	6a1b      	ldr	r3, [r3, #32]
 80a0494:	9301      	str	r3, [sp, #4]
 80a0496:	bd08      	pop	{r3, pc}
 80a0498:	080601d8 	.word	0x080601d8

080a049c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a049c:	b508      	push	{r3, lr}
 80a049e:	4b02      	ldr	r3, [pc, #8]	; (80a04a8 <inet_gethostbyname+0xc>)
 80a04a0:	681b      	ldr	r3, [r3, #0]
 80a04a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a04a4:	9301      	str	r3, [sp, #4]
 80a04a6:	bd08      	pop	{r3, pc}
 80a04a8:	080601c0 	.word	0x080601c0

080a04ac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a04ac:	b508      	push	{r3, lr}
 80a04ae:	4b02      	ldr	r3, [pc, #8]	; (80a04b8 <set_system_mode+0xc>)
 80a04b0:	681b      	ldr	r3, [r3, #0]
 80a04b2:	685b      	ldr	r3, [r3, #4]
 80a04b4:	9301      	str	r3, [sp, #4]
 80a04b6:	bd08      	pop	{r3, pc}
 80a04b8:	080601a4 	.word	0x080601a4

080a04bc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a04bc:	b508      	push	{r3, lr}
 80a04be:	4b02      	ldr	r3, [pc, #8]	; (80a04c8 <system_delay_ms+0xc>)
 80a04c0:	681b      	ldr	r3, [r3, #0]
 80a04c2:	695b      	ldr	r3, [r3, #20]
 80a04c4:	9301      	str	r3, [sp, #4]
 80a04c6:	bd08      	pop	{r3, pc}
 80a04c8:	080601a4 	.word	0x080601a4

080a04cc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a04cc:	b508      	push	{r3, lr}
 80a04ce:	4b02      	ldr	r3, [pc, #8]	; (80a04d8 <application_thread_current+0xc>)
 80a04d0:	681b      	ldr	r3, [r3, #0]
 80a04d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a04d4:	9301      	str	r3, [sp, #4]
 80a04d6:	bd08      	pop	{r3, pc}
 80a04d8:	080601a4 	.word	0x080601a4

080a04dc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a04dc:	b508      	push	{r3, lr}
 80a04de:	4b02      	ldr	r3, [pc, #8]	; (80a04e8 <application_thread_invoke+0xc>)
 80a04e0:	681b      	ldr	r3, [r3, #0]
 80a04e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a04e4:	9301      	str	r3, [sp, #4]
 80a04e6:	bd08      	pop	{r3, pc}
 80a04e8:	080601a4 	.word	0x080601a4

080a04ec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a04ec:	b508      	push	{r3, lr}
 80a04ee:	4b03      	ldr	r3, [pc, #12]	; (80a04fc <system_ctrl_set_app_request_handler+0x10>)
 80a04f0:	681b      	ldr	r3, [r3, #0]
 80a04f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a04f6:	9301      	str	r3, [sp, #4]
 80a04f8:	bd08      	pop	{r3, pc}
 80a04fa:	0000      	.short	0x0000
 80a04fc:	080601a4 	.word	0x080601a4

080a0500 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0500:	b508      	push	{r3, lr}
 80a0502:	4b03      	ldr	r3, [pc, #12]	; (80a0510 <system_ctrl_set_result+0x10>)
 80a0504:	681b      	ldr	r3, [r3, #0]
 80a0506:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a050a:	9301      	str	r3, [sp, #4]
 80a050c:	bd08      	pop	{r3, pc}
 80a050e:	0000      	.short	0x0000
 80a0510:	080601a4 	.word	0x080601a4

080a0514 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0514:	b508      	push	{r3, lr}
 80a0516:	4b02      	ldr	r3, [pc, #8]	; (80a0520 <spark_cloud_flag_connected+0xc>)
 80a0518:	681b      	ldr	r3, [r3, #0]
 80a051a:	695b      	ldr	r3, [r3, #20]
 80a051c:	9301      	str	r3, [sp, #4]
 80a051e:	bd08      	pop	{r3, pc}
 80a0520:	080601cc 	.word	0x080601cc

080a0524 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0524:	b508      	push	{r3, lr}
 80a0526:	4b02      	ldr	r3, [pc, #8]	; (80a0530 <spark_send_event+0xc>)
 80a0528:	681b      	ldr	r3, [r3, #0]
 80a052a:	6a1b      	ldr	r3, [r3, #32]
 80a052c:	9301      	str	r3, [sp, #4]
 80a052e:	bd08      	pop	{r3, pc}
 80a0530:	080601cc 	.word	0x080601cc

080a0534 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a0534:	b508      	push	{r3, lr}
 80a0536:	4b02      	ldr	r3, [pc, #8]	; (80a0540 <spark_subscribe+0xc>)
 80a0538:	681b      	ldr	r3, [r3, #0]
 80a053a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a053c:	9301      	str	r3, [sp, #4]
 80a053e:	bd08      	pop	{r3, pc}
 80a0540:	080601cc 	.word	0x080601cc

080a0544 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0544:	b508      	push	{r3, lr}
 80a0546:	4b02      	ldr	r3, [pc, #8]	; (80a0550 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0548:	681b      	ldr	r3, [r3, #0]
 80a054a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a054c:	9301      	str	r3, [sp, #4]
 80a054e:	bd08      	pop	{r3, pc}
 80a0550:	080601cc 	.word	0x080601cc

080a0554 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0554:	b508      	push	{r3, lr}
 80a0556:	4b02      	ldr	r3, [pc, #8]	; (80a0560 <network_connect+0xc>)
 80a0558:	681b      	ldr	r3, [r3, #0]
 80a055a:	685b      	ldr	r3, [r3, #4]
 80a055c:	9301      	str	r3, [sp, #4]
 80a055e:	bd08      	pop	{r3, pc}
 80a0560:	080601c8 	.word	0x080601c8

080a0564 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0564:	b508      	push	{r3, lr}
 80a0566:	4b02      	ldr	r3, [pc, #8]	; (80a0570 <network_connecting+0xc>)
 80a0568:	681b      	ldr	r3, [r3, #0]
 80a056a:	689b      	ldr	r3, [r3, #8]
 80a056c:	9301      	str	r3, [sp, #4]
 80a056e:	bd08      	pop	{r3, pc}
 80a0570:	080601c8 	.word	0x080601c8

080a0574 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0574:	b508      	push	{r3, lr}
 80a0576:	4b02      	ldr	r3, [pc, #8]	; (80a0580 <network_disconnect+0xc>)
 80a0578:	681b      	ldr	r3, [r3, #0]
 80a057a:	68db      	ldr	r3, [r3, #12]
 80a057c:	9301      	str	r3, [sp, #4]
 80a057e:	bd08      	pop	{r3, pc}
 80a0580:	080601c8 	.word	0x080601c8

080a0584 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0584:	b508      	push	{r3, lr}
 80a0586:	4b02      	ldr	r3, [pc, #8]	; (80a0590 <network_ready+0xc>)
 80a0588:	681b      	ldr	r3, [r3, #0]
 80a058a:	691b      	ldr	r3, [r3, #16]
 80a058c:	9301      	str	r3, [sp, #4]
 80a058e:	bd08      	pop	{r3, pc}
 80a0590:	080601c8 	.word	0x080601c8

080a0594 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0594:	b508      	push	{r3, lr}
 80a0596:	4b02      	ldr	r3, [pc, #8]	; (80a05a0 <network_on+0xc>)
 80a0598:	681b      	ldr	r3, [r3, #0]
 80a059a:	695b      	ldr	r3, [r3, #20]
 80a059c:	9301      	str	r3, [sp, #4]
 80a059e:	bd08      	pop	{r3, pc}
 80a05a0:	080601c8 	.word	0x080601c8

080a05a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a05a4:	b508      	push	{r3, lr}
 80a05a6:	4b02      	ldr	r3, [pc, #8]	; (80a05b0 <network_off+0xc>)
 80a05a8:	681b      	ldr	r3, [r3, #0]
 80a05aa:	699b      	ldr	r3, [r3, #24]
 80a05ac:	9301      	str	r3, [sp, #4]
 80a05ae:	bd08      	pop	{r3, pc}
 80a05b0:	080601c8 	.word	0x080601c8

080a05b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a05b4:	b508      	push	{r3, lr}
 80a05b6:	4b02      	ldr	r3, [pc, #8]	; (80a05c0 <network_listen+0xc>)
 80a05b8:	681b      	ldr	r3, [r3, #0]
 80a05ba:	69db      	ldr	r3, [r3, #28]
 80a05bc:	9301      	str	r3, [sp, #4]
 80a05be:	bd08      	pop	{r3, pc}
 80a05c0:	080601c8 	.word	0x080601c8

080a05c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a05c4:	b508      	push	{r3, lr}
 80a05c6:	4b02      	ldr	r3, [pc, #8]	; (80a05d0 <network_listening+0xc>)
 80a05c8:	681b      	ldr	r3, [r3, #0]
 80a05ca:	6a1b      	ldr	r3, [r3, #32]
 80a05cc:	9301      	str	r3, [sp, #4]
 80a05ce:	bd08      	pop	{r3, pc}
 80a05d0:	080601c8 	.word	0x080601c8

080a05d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a05d4:	b508      	push	{r3, lr}
 80a05d6:	4b02      	ldr	r3, [pc, #8]	; (80a05e0 <network_set_listen_timeout+0xc>)
 80a05d8:	681b      	ldr	r3, [r3, #0]
 80a05da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a05dc:	9301      	str	r3, [sp, #4]
 80a05de:	bd08      	pop	{r3, pc}
 80a05e0:	080601c8 	.word	0x080601c8

080a05e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a05e4:	b508      	push	{r3, lr}
 80a05e6:	4b02      	ldr	r3, [pc, #8]	; (80a05f0 <network_get_listen_timeout+0xc>)
 80a05e8:	681b      	ldr	r3, [r3, #0]
 80a05ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a05ec:	9301      	str	r3, [sp, #4]
 80a05ee:	bd08      	pop	{r3, pc}
 80a05f0:	080601c8 	.word	0x080601c8

080a05f4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a05f4:	b508      	push	{r3, lr}
 80a05f6:	4b02      	ldr	r3, [pc, #8]	; (80a0600 <malloc+0xc>)
 80a05f8:	681b      	ldr	r3, [r3, #0]
 80a05fa:	681b      	ldr	r3, [r3, #0]
 80a05fc:	9301      	str	r3, [sp, #4]
 80a05fe:	bd08      	pop	{r3, pc}
 80a0600:	080601a0 	.word	0x080601a0

080a0604 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0604:	b508      	push	{r3, lr}
 80a0606:	4b02      	ldr	r3, [pc, #8]	; (80a0610 <free+0xc>)
 80a0608:	681b      	ldr	r3, [r3, #0]
 80a060a:	685b      	ldr	r3, [r3, #4]
 80a060c:	9301      	str	r3, [sp, #4]
 80a060e:	bd08      	pop	{r3, pc}
 80a0610:	080601a0 	.word	0x080601a0

080a0614 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0614:	b508      	push	{r3, lr}
 80a0616:	4b02      	ldr	r3, [pc, #8]	; (80a0620 <realloc+0xc>)
 80a0618:	681b      	ldr	r3, [r3, #0]
 80a061a:	689b      	ldr	r3, [r3, #8]
 80a061c:	9301      	str	r3, [sp, #4]
 80a061e:	bd08      	pop	{r3, pc}
 80a0620:	080601a0 	.word	0x080601a0

080a0624 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0624:	b508      	push	{r3, lr}
 80a0626:	4b02      	ldr	r3, [pc, #8]	; (80a0630 <abort+0xc>)
 80a0628:	681b      	ldr	r3, [r3, #0]
 80a062a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a062c:	9301      	str	r3, [sp, #4]
 80a062e:	bd08      	pop	{r3, pc}
 80a0630:	080601a0 	.word	0x080601a0

080a0634 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0634:	b508      	push	{r3, lr}
 80a0636:	4b02      	ldr	r3, [pc, #8]	; (80a0640 <_malloc_r+0xc>)
 80a0638:	681b      	ldr	r3, [r3, #0]
 80a063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a063c:	9301      	str	r3, [sp, #4]
 80a063e:	bd08      	pop	{r3, pc}
 80a0640:	080601a0 	.word	0x080601a0

080a0644 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0644:	b508      	push	{r3, lr}
 80a0646:	4b02      	ldr	r3, [pc, #8]	; (80a0650 <newlib_impure_ptr_callback+0xc>)
 80a0648:	681b      	ldr	r3, [r3, #0]
 80a064a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a064c:	9301      	str	r3, [sp, #4]
 80a064e:	bd08      	pop	{r3, pc}
 80a0650:	080601a0 	.word	0x080601a0

080a0654 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0654:	2100      	movs	r1, #0
 80a0656:	f7ff bf31 	b.w	80a04bc <system_delay_ms>

080a065a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a065a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a065c:	6883      	ldr	r3, [r0, #8]
 80a065e:	4604      	mov	r4, r0
 80a0660:	b90b      	cbnz	r3, 80a0666 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a0662:	f001 f876 	bl	80a1752 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0666:	68c3      	ldr	r3, [r0, #12]
 80a0668:	4798      	blx	r3
      if (_M_manager)
 80a066a:	68a3      	ldr	r3, [r4, #8]
 80a066c:	b11b      	cbz	r3, 80a0676 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a066e:	2203      	movs	r2, #3
 80a0670:	4621      	mov	r1, r4
 80a0672:	4620      	mov	r0, r4
 80a0674:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0676:	4620      	mov	r0, r4
}
 80a0678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a067c:	2110      	movs	r1, #16
 80a067e:	f001 b864 	b.w	80a174a <_ZdlPvj>

080a0682 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0682:	4770      	bx	lr

080a0684 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a0684:	2000      	movs	r0, #0
 80a0686:	4770      	bx	lr

080a0688 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0688:	b510      	push	{r4, lr}
 80a068a:	4604      	mov	r4, r0
 80a068c:	2110      	movs	r1, #16
 80a068e:	f001 f85c 	bl	80a174a <_ZdlPvj>
 80a0692:	4620      	mov	r0, r4
 80a0694:	bd10      	pop	{r4, pc}

080a0696 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a0696:	b508      	push	{r3, lr}
      { delete this; }
 80a0698:	f7ff fff6 	bl	80a0688 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a069c:	bd08      	pop	{r3, pc}

080a069e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a069e:	b510      	push	{r4, lr}
      if (_M_manager)
 80a06a0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a06a2:	4604      	mov	r4, r0
      if (_M_manager)
 80a06a4:	b113      	cbz	r3, 80a06ac <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a06a6:	2203      	movs	r2, #3
 80a06a8:	4601      	mov	r1, r0
 80a06aa:	4798      	blx	r3
    }
 80a06ac:	4620      	mov	r0, r4
 80a06ae:	bd10      	pop	{r4, pc}

080a06b0 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a06b0:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a06b2:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a06b4:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a06b8:	6002      	str	r2, [r0, #0]
 80a06ba:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a06bc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a06be:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a06c0:	680c      	ldr	r4, [r1, #0]
 80a06c2:	8085      	strh	r5, [r0, #4]
 80a06c4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a06c6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a06c8:	bd30      	pop	{r4, r5, pc}

080a06ca <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a06ca:	b510      	push	{r4, lr}
 80a06cc:	4604      	mov	r4, r0
    free((void*)msg_);
 80a06ce:	6800      	ldr	r0, [r0, #0]
 80a06d0:	f7ff ff98 	bl	80a0604 <free>
}
 80a06d4:	4620      	mov	r0, r4
 80a06d6:	bd10      	pop	{r4, pc}

080a06d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a06d8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a06da:	68c4      	ldr	r4, [r0, #12]
 80a06dc:	b1f4      	cbz	r4, 80a071c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a06de:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a06e0:	2b02      	cmp	r3, #2
 80a06e2:	d103      	bne.n	80a06ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a06e4:	f104 000c 	add.w	r0, r4, #12
 80a06e8:	f7ff ffef 	bl	80a06ca <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a06ec:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a06ee:	b135      	cbz	r5, 80a06fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a06f0:	4628      	mov	r0, r5
 80a06f2:	f7ff ffd4 	bl	80a069e <_ZNSt14_Function_baseD1Ev>
 80a06f6:	2110      	movs	r1, #16
 80a06f8:	4628      	mov	r0, r5
 80a06fa:	f001 f826 	bl	80a174a <_ZdlPvj>
 80a06fe:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0700:	b135      	cbz	r5, 80a0710 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0702:	4628      	mov	r0, r5
 80a0704:	f7ff ffcb 	bl	80a069e <_ZNSt14_Function_baseD1Ev>
 80a0708:	2110      	movs	r1, #16
 80a070a:	4628      	mov	r0, r5
 80a070c:	f001 f81d 	bl	80a174a <_ZdlPvj>
 80a0710:	4620      	mov	r0, r4
 80a0712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0716:	2114      	movs	r1, #20
 80a0718:	f001 b817 	b.w	80a174a <_ZdlPvj>
 80a071c:	bd38      	pop	{r3, r4, r5, pc}

080a071e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a071e:	680b      	ldr	r3, [r1, #0]
 80a0720:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a0722:	b113      	cbz	r3, 80a072a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a0724:	685a      	ldr	r2, [r3, #4]
 80a0726:	3201      	adds	r2, #1
 80a0728:	605a      	str	r2, [r3, #4]
      }
 80a072a:	4770      	bx	lr

080a072c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a072c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a072e:	460e      	mov	r6, r1
 80a0730:	4604      	mov	r4, r0
 80a0732:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0736:	460d      	mov	r5, r1
 80a0738:	a801      	add	r0, sp, #4
 80a073a:	4631      	mov	r1, r6
 80a073c:	9300      	str	r3, [sp, #0]
 80a073e:	f7ff ffee 	bl	80a071e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0742:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0744:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0746:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a0748:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a074a:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a074c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a074e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0750:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a0752:	f7ff fd23 	bl	80a019c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0756:	4630      	mov	r0, r6
 80a0758:	f7ff fd20 	bl	80a019c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a075c:	4628      	mov	r0, r5
 80a075e:	2108      	movs	r1, #8
 80a0760:	f000 fff3 	bl	80a174a <_ZdlPvj>
        return p;
    }
 80a0764:	4620      	mov	r0, r4
 80a0766:	b002      	add	sp, #8
 80a0768:	bd70      	pop	{r4, r5, r6, pc}

080a076a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a076a:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a076c:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a076e:	460b      	mov	r3, r1
 80a0770:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0772:	c803      	ldmia	r0, {r0, r1}
 80a0774:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0778:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a077c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0780:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a0784:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0788:	b002      	add	sp, #8
 80a078a:	bd10      	pop	{r4, pc}

080a078c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a078c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a078e:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0790:	b90a      	cbnz	r2, 80a0796 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0792:	f000 ffde 	bl	80a1752 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0796:	68c3      	ldr	r3, [r0, #12]
    }
 80a0798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a079c:	4718      	bx	r3

080a079e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a079e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a07a0:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a07a2:	f100 0110 	add.w	r1, r0, #16
 80a07a6:	f7ff fff1 	bl	80a078c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a07aa:	bd08      	pop	{r3, pc}

080a07ac <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a07ac:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a07ae:	b510      	push	{r4, lr}
      if (_M_empty())
 80a07b0:	b90a      	cbnz	r2, 80a07b6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a07b2:	f000 ffce 	bl	80a1752 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a07b6:	68c3      	ldr	r3, [r0, #12]
    }
 80a07b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a07bc:	4718      	bx	r3

080a07be <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a07be:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a07c0:	6800      	ldr	r0, [r0, #0]
 80a07c2:	f100 0110 	add.w	r1, r0, #16
 80a07c6:	f7ff fff1 	bl	80a07ac <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a07ca:	bd08      	pop	{r3, pc}

080a07cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a07cc:	b538      	push	{r3, r4, r5, lr}
 80a07ce:	2300      	movs	r3, #0
 80a07d0:	4604      	mov	r4, r0
 80a07d2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a07d4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a07d6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a07d8:	f7ff fc5d 	bl	80a0096 <_Znwj>
 80a07dc:	b128      	cbz	r0, 80a07ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a07de:	2301      	movs	r3, #1
 80a07e0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a07e4:	4b02      	ldr	r3, [pc, #8]	; (80a07f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a07e6:	60c5      	str	r5, [r0, #12]
 80a07e8:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a07ea:	6020      	str	r0, [r4, #0]
	}
 80a07ec:	4620      	mov	r0, r4
 80a07ee:	bd38      	pop	{r3, r4, r5, pc}
 80a07f0:	080a1894 	.word	0x080a1894

080a07f4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a07f4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a07f6:	2300      	movs	r3, #0
 80a07f8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a07fa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a07fc:	4604      	mov	r4, r0
 80a07fe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a0800:	b12b      	cbz	r3, 80a080e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0802:	2202      	movs	r2, #2
 80a0804:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0806:	68eb      	ldr	r3, [r5, #12]
 80a0808:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a080a:	68ab      	ldr	r3, [r5, #8]
 80a080c:	60a3      	str	r3, [r4, #8]
    }
 80a080e:	4620      	mov	r0, r4
 80a0810:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0814 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a0814:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0816:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a0818:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a081a:	4668      	mov	r0, sp
 80a081c:	f7ff ff48 	bl	80a06b0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a0820:	f04f 0302 	mov.w	r3, #2
 80a0824:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a0828:	2a00      	cmp	r2, #0
 80a082a:	d103      	bne.n	80a0834 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a082c:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a0830:	2900      	cmp	r1, #0
 80a0832:	d1f7      	bne.n	80a0824 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a0834:	d125      	bne.n	80a0882 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a0836:	f104 050c 	add.w	r5, r4, #12
 80a083a:	4669      	mov	r1, sp
 80a083c:	4628      	mov	r0, r5
 80a083e:	f7ff ff37 	bl	80a06b0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a0842:	2301      	movs	r3, #1
 80a0844:	f3bf 8f5b 	dmb	ish
 80a0848:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a084a:	2000      	movs	r0, #0
 80a084c:	f3bf 8f5b 	dmb	ish
 80a0850:	f104 0308 	add.w	r3, r4, #8
 80a0854:	e853 6f00 	ldrex	r6, [r3]
 80a0858:	e843 0200 	strex	r2, r0, [r3]
 80a085c:	2a00      	cmp	r2, #0
 80a085e:	d1f9      	bne.n	80a0854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a0860:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a0864:	b16e      	cbz	r6, 80a0882 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a0866:	f7ff fe31 	bl	80a04cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a086a:	b178      	cbz	r0, 80a088c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a086c:	4629      	mov	r1, r5
 80a086e:	4630      	mov	r0, r6
 80a0870:	f7ff ff8c 	bl	80a078c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a0874:	4630      	mov	r0, r6
 80a0876:	f7ff ff12 	bl	80a069e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a087a:	2110      	movs	r1, #16
 80a087c:	4630      	mov	r0, r6
 80a087e:	f000 ff64 	bl	80a174a <_ZdlPvj>
        p_->setError(std::move(error));
 80a0882:	4668      	mov	r0, sp
 80a0884:	f7ff ff21 	bl	80a06ca <_ZN8particle5ErrorD1Ev>
    }
 80a0888:	b009      	add	sp, #36	; 0x24
 80a088a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a088c:	4631      	mov	r1, r6
 80a088e:	a802      	add	r0, sp, #8
 80a0890:	f7ff ffb0 	bl	80a07f4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a0894:	68e0      	ldr	r0, [r4, #12]
 80a0896:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a089a:	b108      	cbz	r0, 80a08a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a089c:	f000 ffa4 	bl	80a17e8 <strdup>
        type_(type) {
 80a08a0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a08a2:	2010      	movs	r0, #16
 80a08a4:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a08a8:	f7ff fbf5 	bl	80a0096 <_Znwj>
 80a08ac:	4605      	mov	r5, r0
 80a08ae:	b1e8      	cbz	r0, 80a08ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a08b0:	2700      	movs	r7, #0
 80a08b2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a08b4:	2018      	movs	r0, #24
 80a08b6:	f7ff fbee 	bl	80a0096 <_Znwj>
 80a08ba:	4604      	mov	r4, r0
 80a08bc:	b188      	cbz	r0, 80a08e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a08be:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a08c0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a08c2:	a802      	add	r0, sp, #8
 80a08c4:	f7ff ff51 	bl	80a076a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a08c8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a08ca:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a08cc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a08ce:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a08d0:	9204      	str	r2, [sp, #16]
 80a08d2:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a08d4:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a08d6:	60e3      	str	r3, [r4, #12]
 80a08d8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a08dc:	9205      	str	r2, [sp, #20]
 80a08de:	f7ff fee7 	bl	80a06b0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a08e2:	4b08      	ldr	r3, [pc, #32]	; (80a0904 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a08e4:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a08e6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a08e8:	4b07      	ldr	r3, [pc, #28]	; (80a0908 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a08ea:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a08ec:	a806      	add	r0, sp, #24
 80a08ee:	f7ff feec 	bl	80a06ca <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a08f2:	a802      	add	r0, sp, #8
 80a08f4:	f7ff fed3 	bl	80a069e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a08f8:	2200      	movs	r2, #0
 80a08fa:	4629      	mov	r1, r5
 80a08fc:	4803      	ldr	r0, [pc, #12]	; (80a090c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a08fe:	f7ff fded 	bl	80a04dc <application_thread_invoke>
 80a0902:	e7b7      	b.n	80a0874 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a0904:	080a079f 	.word	0x080a079f
 80a0908:	080a0a35 	.word	0x080a0a35
 80a090c:	080a065b 	.word	0x080a065b

080a0910 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0914:	b08a      	sub	sp, #40	; 0x28
 80a0916:	4605      	mov	r5, r0
 80a0918:	460c      	mov	r4, r1
 80a091a:	4617      	mov	r7, r2
 80a091c:	4698      	mov	r8, r3
 80a091e:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0922:	f7ff fdf7 	bl	80a0514 <spark_cloud_flag_connected>
 80a0926:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a0928:	4682      	mov	sl, r0
 80a092a:	bb38      	cbnz	r0, 80a097c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a092c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0930:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0932:	a905      	add	r1, sp, #20
 80a0934:	4630      	mov	r0, r6
 80a0936:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a093a:	f7ff feb9 	bl	80a06b0 <_ZN8particle5ErrorC1EOS0_>
 80a093e:	2014      	movs	r0, #20
 80a0940:	f7ff fba9 	bl	80a0096 <_Znwj>
 80a0944:	4604      	mov	r4, r0
 80a0946:	b148      	cbz	r0, 80a095c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0948:	2302      	movs	r3, #2
 80a094a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a094c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a094e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0952:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a0954:	4631      	mov	r1, r6
 80a0956:	300c      	adds	r0, #12
 80a0958:	f7ff feaa 	bl	80a06b0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a095c:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a095e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0960:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a0964:	f7ff ff32 	bl	80a07cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0968:	4630      	mov	r0, r6
 80a096a:	f7ff feae 	bl	80a06ca <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a096e:	a805      	add	r0, sp, #20
 80a0970:	f7ff feab 	bl	80a06ca <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a0974:	4628      	mov	r0, r5
 80a0976:	b00a      	add	sp, #40	; 0x28
 80a0978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a097c:	230c      	movs	r3, #12
 80a097e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0982:	2014      	movs	r0, #20
 80a0984:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a0988:	9307      	str	r3, [sp, #28]
 80a098a:	f7ff fb84 	bl	80a0096 <_Znwj>
 80a098e:	4601      	mov	r1, r0
 80a0990:	b128      	cbz	r0, 80a099e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0992:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a0996:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a099a:	f880 a001 	strb.w	sl, [r0, #1]
 80a099e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a09a0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a09a2:	f7ff ff13 	bl	80a07cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a09a6:	4b22      	ldr	r3, [pc, #136]	; (80a0a30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a09a8:	2008      	movs	r0, #8
 80a09aa:	9308      	str	r3, [sp, #32]
 80a09ac:	f7ff fb73 	bl	80a0096 <_Znwj>
 80a09b0:	4682      	mov	sl, r0
 80a09b2:	b128      	cbz	r0, 80a09c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a09b4:	9b03      	ldr	r3, [sp, #12]
 80a09b6:	a904      	add	r1, sp, #16
 80a09b8:	f840 3b04 	str.w	r3, [r0], #4
 80a09bc:	f7ff feaf 	bl	80a071e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a09c0:	4642      	mov	r2, r8
 80a09c2:	4639      	mov	r1, r7
 80a09c4:	4620      	mov	r0, r4
 80a09c6:	9600      	str	r6, [sp, #0]
 80a09c8:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a09cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a09d0:	f7ff fda8 	bl	80a0524 <spark_send_event>
 80a09d4:	b9b8      	cbnz	r0, 80a0a06 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a09d6:	9b03      	ldr	r3, [sp, #12]
 80a09d8:	785b      	ldrb	r3, [r3, #1]
 80a09da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a09de:	b993      	cbnz	r3, 80a0a06 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a09e0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a09e4:	a905      	add	r1, sp, #20
 80a09e6:	a803      	add	r0, sp, #12
 80a09e8:	9205      	str	r2, [sp, #20]
 80a09ea:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a09ee:	f7ff ff11 	bl	80a0814 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a09f2:	a805      	add	r0, sp, #20
 80a09f4:	f7ff fe69 	bl	80a06ca <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a09f8:	a805      	add	r0, sp, #20
 80a09fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a09fc:	f7ff fe96 	bl	80a072c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a0a00:	a806      	add	r0, sp, #24
 80a0a02:	f7ff fbcb 	bl	80a019c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0a06:	9b03      	ldr	r3, [sp, #12]
 80a0a08:	a904      	add	r1, sp, #16
 80a0a0a:	a806      	add	r0, sp, #24
 80a0a0c:	9305      	str	r3, [sp, #20]
 80a0a0e:	f7ff fe86 	bl	80a071e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0a12:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0a14:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0a16:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a0a18:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a0a1a:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a0a1c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a0a1e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a0a20:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a0a22:	f7ff fbbb 	bl	80a019c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0a26:	a804      	add	r0, sp, #16
 80a0a28:	f7ff fbb8 	bl	80a019c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a0a2c:	e7a2      	b.n	80a0974 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a0a2e:	bf00      	nop
 80a0a30:	080a0af9 	.word	0x080a0af9

080a0a34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a0a34:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a38:	4605      	mov	r5, r0
	  switch (__op)
 80a0a3a:	d007      	beq.n	80a0a4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a0a3c:	2a03      	cmp	r2, #3
 80a0a3e:	d018      	beq.n	80a0a72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a0a40:	2a01      	cmp	r2, #1
 80a0a42:	d101      	bne.n	80a0a48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a0a44:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0a46:	6003      	str	r3, [r0, #0]
	}
 80a0a48:	2000      	movs	r0, #0
 80a0a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0a4c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a0a4e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0a50:	f7ff fb21 	bl	80a0096 <_Znwj>
 80a0a54:	4604      	mov	r4, r0
 80a0a56:	b150      	cbz	r0, 80a0a6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0a58:	4631      	mov	r1, r6
 80a0a5a:	f7ff fecb 	bl	80a07f4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a0a5e:	6930      	ldr	r0, [r6, #16]
 80a0a60:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0a64:	b108      	cbz	r0, 80a0a6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a0a66:	f000 febf 	bl	80a17e8 <strdup>
        type_(type) {
 80a0a6a:	6120      	str	r0, [r4, #16]
 80a0a6c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a0a6e:	602c      	str	r4, [r5, #0]
	}
 80a0a70:	e7ea      	b.n	80a0a48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a0a72:	6804      	ldr	r4, [r0, #0]
 80a0a74:	2c00      	cmp	r4, #0
 80a0a76:	d0e7      	beq.n	80a0a48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a0a78:	f104 0010 	add.w	r0, r4, #16
 80a0a7c:	f7ff fe25 	bl	80a06ca <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a0a80:	4620      	mov	r0, r4
 80a0a82:	f7ff fe0c 	bl	80a069e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a0a86:	2118      	movs	r1, #24
 80a0a88:	4620      	mov	r0, r4
 80a0a8a:	f000 fe5e 	bl	80a174a <_ZdlPvj>
 80a0a8e:	e7db      	b.n	80a0a48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a0a90 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a0a90:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a0a92:	2300      	movs	r3, #0
 80a0a94:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a0a96:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a0a98:	4604      	mov	r4, r0
 80a0a9a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a0a9c:	b12b      	cbz	r3, 80a0aaa <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0a9e:	2202      	movs	r2, #2
 80a0aa0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0aa2:	68eb      	ldr	r3, [r5, #12]
 80a0aa4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0aa6:	68ab      	ldr	r3, [r5, #8]
 80a0aa8:	60a3      	str	r3, [r4, #8]
    }
 80a0aaa:	4620      	mov	r0, r4
 80a0aac:	bd38      	pop	{r3, r4, r5, pc}

080a0aae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a0aae:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0ab0:	b570      	push	{r4, r5, r6, lr}
 80a0ab2:	4604      	mov	r4, r0
	  switch (__op)
 80a0ab4:	d007      	beq.n	80a0ac6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a0ab6:	2a03      	cmp	r2, #3
 80a0ab8:	d012      	beq.n	80a0ae0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a0aba:	2a01      	cmp	r2, #1
 80a0abc:	d101      	bne.n	80a0ac2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a0abe:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0ac0:	6003      	str	r3, [r0, #0]
	}
 80a0ac2:	2000      	movs	r0, #0
 80a0ac4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0ac6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a0ac8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0aca:	f7ff fae4 	bl	80a0096 <_Znwj>
 80a0ace:	4605      	mov	r5, r0
 80a0ad0:	b120      	cbz	r0, 80a0adc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a0ad2:	4631      	mov	r1, r6
 80a0ad4:	f7ff ffdc 	bl	80a0a90 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a0ad8:	7c33      	ldrb	r3, [r6, #16]
 80a0ada:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a0adc:	6025      	str	r5, [r4, #0]
	}
 80a0ade:	e7f0      	b.n	80a0ac2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a0ae0:	6804      	ldr	r4, [r0, #0]
 80a0ae2:	2c00      	cmp	r4, #0
 80a0ae4:	d0ed      	beq.n	80a0ac2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a0ae6:	4620      	mov	r0, r4
 80a0ae8:	f7ff fdd9 	bl	80a069e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a0aec:	2114      	movs	r1, #20
 80a0aee:	4620      	mov	r0, r4
 80a0af0:	f000 fe2b 	bl	80a174a <_ZdlPvj>
 80a0af4:	e7e5      	b.n	80a0ac2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a0af8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a0af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0afa:	4604      	mov	r4, r0
 80a0afc:	b089      	sub	sp, #36	; 0x24
 80a0afe:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a0b00:	a801      	add	r0, sp, #4
 80a0b02:	4611      	mov	r1, r2
 80a0b04:	f7ff fe12 	bl	80a072c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a0b08:	b1a4      	cbz	r4, 80a0b34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a0b0a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0b0c:	b11d      	cbz	r5, 80a0b16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a0b0e:	4628      	mov	r0, r5
 80a0b10:	f000 fe6a 	bl	80a17e8 <strdup>
 80a0b14:	4605      	mov	r5, r0
 80a0b16:	a801      	add	r0, sp, #4
 80a0b18:	a903      	add	r1, sp, #12
        type_(type) {
 80a0b1a:	9503      	str	r5, [sp, #12]
 80a0b1c:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a0b20:	f7ff fe78 	bl	80a0814 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0b24:	a803      	add	r0, sp, #12
 80a0b26:	f7ff fdd0 	bl	80a06ca <_ZN8particle5ErrorD1Ev>
 80a0b2a:	a802      	add	r0, sp, #8
 80a0b2c:	f7ff fb36 	bl	80a019c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a0b30:	b009      	add	sp, #36	; 0x24
 80a0b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a0b34:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a0b36:	9d01      	ldr	r5, [sp, #4]
 80a0b38:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a0b3c:	2a00      	cmp	r2, #0
 80a0b3e:	d103      	bne.n	80a0b48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a0b40:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a0b44:	2900      	cmp	r1, #0
 80a0b46:	d1f7      	bne.n	80a0b38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a0b48:	d1ef      	bne.n	80a0b2a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a0b4a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a0b4c:	f3bf 8f5b 	dmb	ish
 80a0b50:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a0b52:	f3bf 8f5b 	dmb	ish
 80a0b56:	1d2b      	adds	r3, r5, #4
 80a0b58:	e853 6f00 	ldrex	r6, [r3]
 80a0b5c:	e843 4200 	strex	r2, r4, [r3]
 80a0b60:	2a00      	cmp	r2, #0
 80a0b62:	d1f9      	bne.n	80a0b58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a0b64:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a0b68:	2e00      	cmp	r6, #0
 80a0b6a:	d0de      	beq.n	80a0b2a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a0b6c:	4620      	mov	r0, r4
 80a0b6e:	f7ff fcad 	bl	80a04cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a0b72:	4607      	mov	r7, r0
 80a0b74:	b160      	cbz	r0, 80a0b90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0b76:	4630      	mov	r0, r6
 80a0b78:	f105 010c 	add.w	r1, r5, #12
 80a0b7c:	f7ff fe16 	bl	80a07ac <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a0b80:	4630      	mov	r0, r6
 80a0b82:	f7ff fd8c 	bl	80a069e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a0b86:	2110      	movs	r1, #16
 80a0b88:	4630      	mov	r0, r6
 80a0b8a:	f000 fdde 	bl	80a174a <_ZdlPvj>
 80a0b8e:	e7cc      	b.n	80a0b2a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0b90:	4631      	mov	r1, r6
 80a0b92:	a803      	add	r0, sp, #12
 80a0b94:	f7ff ff7c 	bl	80a0a90 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0b98:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0b9a:	2010      	movs	r0, #16
 80a0b9c:	f88d 301c 	strb.w	r3, [sp, #28]
 80a0ba0:	f7ff fa79 	bl	80a0096 <_Znwj>
 80a0ba4:	4605      	mov	r5, r0
 80a0ba6:	b1d0      	cbz	r0, 80a0bde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a0ba8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0baa:	2014      	movs	r0, #20
 80a0bac:	f7ff fa73 	bl	80a0096 <_Znwj>
 80a0bb0:	4604      	mov	r4, r0
 80a0bb2:	b178      	cbz	r0, 80a0bd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a0bb4:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a0bb6:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a0bb8:	a803      	add	r0, sp, #12
 80a0bba:	f7ff fdd6 	bl	80a076a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0bbe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0bc0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0bc2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0bc4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a0bc6:	9205      	str	r2, [sp, #20]
 80a0bc8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0bca:	60e3      	str	r3, [r4, #12]
 80a0bcc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a0bd0:	9206      	str	r2, [sp, #24]
 80a0bd2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0bd4:	4b06      	ldr	r3, [pc, #24]	; (80a0bf0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0bd6:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0bd8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0bda:	4b06      	ldr	r3, [pc, #24]	; (80a0bf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a0bdc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a0bde:	a803      	add	r0, sp, #12
 80a0be0:	f7ff fd5d 	bl	80a069e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0be4:	2200      	movs	r2, #0
 80a0be6:	4629      	mov	r1, r5
 80a0be8:	4803      	ldr	r0, [pc, #12]	; (80a0bf8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a0bea:	f7ff fc77 	bl	80a04dc <application_thread_invoke>
 80a0bee:	e7c7      	b.n	80a0b80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a0bf0:	080a07bf 	.word	0x080a07bf
 80a0bf4:	080a0aaf 	.word	0x080a0aaf
 80a0bf8:	080a065b 	.word	0x080a065b

080a0bfc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a0bfc:	4770      	bx	lr

080a0bfe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c00:	4606      	mov	r6, r0
 80a0c02:	4615      	mov	r5, r2
 80a0c04:	460c      	mov	r4, r1
 80a0c06:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0c08:	42bc      	cmp	r4, r7
 80a0c0a:	d006      	beq.n	80a0c1a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0c0c:	6833      	ldr	r3, [r6, #0]
 80a0c0e:	4630      	mov	r0, r6
 80a0c10:	689b      	ldr	r3, [r3, #8]
 80a0c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0c16:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a0c18:	e7f6      	b.n	80a0c08 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a0c1a:	4628      	mov	r0, r5
 80a0c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c1e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a0c1e:	2200      	movs	r2, #0
 80a0c20:	7c00      	ldrb	r0, [r0, #16]
 80a0c22:	f7ff bb81 	b.w	80a0328 <hal_i2c_write>

080a0c26 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a0c26:	2100      	movs	r1, #0
 80a0c28:	7c00      	ldrb	r0, [r0, #16]
 80a0c2a:	f7ff bb85 	b.w	80a0338 <hal_i2c_available>

080a0c2e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0c2e:	2100      	movs	r1, #0
 80a0c30:	7c00      	ldrb	r0, [r0, #16]
 80a0c32:	f7ff bb89 	b.w	80a0348 <hal_i2c_read>

080a0c36 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0c36:	2100      	movs	r1, #0
 80a0c38:	7c00      	ldrb	r0, [r0, #16]
 80a0c3a:	f7ff bb8d 	b.w	80a0358 <hal_i2c_peek>

080a0c3e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0c3e:	2100      	movs	r1, #0
 80a0c40:	7c00      	ldrb	r0, [r0, #16]
 80a0c42:	f7ff bb91 	b.w	80a0368 <hal_i2c_flush>

080a0c46 <_ZN7TwoWireD0Ev>:
 80a0c46:	b510      	push	{r4, lr}
 80a0c48:	4604      	mov	r4, r0
 80a0c4a:	2114      	movs	r1, #20
 80a0c4c:	f000 fd7d 	bl	80a174a <_ZdlPvj>
 80a0c50:	4620      	mov	r0, r4
 80a0c52:	bd10      	pop	{r4, pc}

080a0c54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0c54:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0c5a:	4604      	mov	r4, r0
 80a0c5c:	4608      	mov	r0, r1
 80a0c5e:	2100      	movs	r1, #0
 80a0c60:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0c64:	4b03      	ldr	r3, [pc, #12]	; (80a0c74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a0c66:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0c68:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a0c6a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0c6c:	f7ff fb8c 	bl	80a0388 <hal_i2c_init>
}
 80a0c70:	4620      	mov	r0, r4
 80a0c72:	bd10      	pop	{r4, pc}
 80a0c74:	080a18b0 	.word	0x080a18b0

080a0c78 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0c78:	4770      	bx	lr

080a0c7a <_ZN9IPAddressD0Ev>:
 80a0c7a:	b510      	push	{r4, lr}
 80a0c7c:	4604      	mov	r4, r0
 80a0c7e:	2118      	movs	r1, #24
 80a0c80:	f000 fd63 	bl	80a174a <_ZdlPvj>
 80a0c84:	4620      	mov	r0, r4
 80a0c86:	bd10      	pop	{r4, pc}

080a0c88 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c8a:	460e      	mov	r6, r1
 80a0c8c:	2400      	movs	r4, #0
 80a0c8e:	f100 0708 	add.w	r7, r0, #8
 80a0c92:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0c94:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0c98:	220a      	movs	r2, #10
 80a0c9a:	4630      	mov	r0, r6
 80a0c9c:	f000 f8eb 	bl	80a0e76 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0ca0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0ca2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0ca4:	d101      	bne.n	80a0caa <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0ca6:	4620      	mov	r0, r4
 80a0ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0caa:	2c00      	cmp	r4, #0
 80a0cac:	d0f2      	beq.n	80a0c94 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0cae:	212e      	movs	r1, #46	; 0x2e
 80a0cb0:	4630      	mov	r0, r6
 80a0cb2:	f000 f8dd 	bl	80a0e70 <_ZN5Print5printEc>
 80a0cb6:	4404      	add	r4, r0
 80a0cb8:	e7ec      	b.n	80a0c94 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a0cbc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0cbc:	b510      	push	{r4, lr}
 80a0cbe:	4604      	mov	r4, r0
 80a0cc0:	4b04      	ldr	r3, [pc, #16]	; (80a0cd4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0cc2:	2211      	movs	r2, #17
 80a0cc4:	2100      	movs	r1, #0
 80a0cc6:	f840 3b04 	str.w	r3, [r0], #4
 80a0cca:	f000 fd61 	bl	80a1790 <memset>
}
 80a0cce:	4620      	mov	r0, r4
 80a0cd0:	bd10      	pop	{r4, pc}
 80a0cd2:	bf00      	nop
 80a0cd4:	080a18d8 	.word	0x080a18d8

080a0cd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0cd8:	4603      	mov	r3, r0
 80a0cda:	4a07      	ldr	r2, [pc, #28]	; (80a0cf8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0cdc:	b510      	push	{r4, lr}
 80a0cde:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0ce2:	f101 0210 	add.w	r2, r1, #16
 80a0ce6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0cea:	4291      	cmp	r1, r2
 80a0cec:	f843 4b04 	str.w	r4, [r3], #4
 80a0cf0:	d1f9      	bne.n	80a0ce6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0cf2:	780a      	ldrb	r2, [r1, #0]
 80a0cf4:	701a      	strb	r2, [r3, #0]
}
 80a0cf6:	bd10      	pop	{r4, pc}
 80a0cf8:	080a18d8 	.word	0x080a18d8

080a0cfc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a0cfc:	4a02      	ldr	r2, [pc, #8]	; (80a0d08 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a0cfe:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0d02:	2204      	movs	r2, #4
 80a0d04:	7502      	strb	r2, [r0, #20]
}
 80a0d06:	4770      	bx	lr
 80a0d08:	080a18d8 	.word	0x080a18d8

080a0d0c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0d0c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0d0e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0d12:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0d16:	2304      	movs	r3, #4
 80a0d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0d1c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0d20:	6044      	str	r4, [r0, #4]
 80a0d22:	7503      	strb	r3, [r0, #20]
}
 80a0d24:	bd10      	pop	{r4, pc}
	...

080a0d28 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0d2a:	4d04      	ldr	r5, [pc, #16]	; (80a0d3c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0d2c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0d2e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0d32:	9500      	str	r5, [sp, #0]
 80a0d34:	f7ff ffea 	bl	80a0d0c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0d38:	b003      	add	sp, #12
 80a0d3a:	bd30      	pop	{r4, r5, pc}
 80a0d3c:	080a18d8 	.word	0x080a18d8

080a0d40 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0d40:	4b01      	ldr	r3, [pc, #4]	; (80a0d48 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0d42:	4a02      	ldr	r2, [pc, #8]	; (80a0d4c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0d44:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0d46:	4770      	bx	lr
 80a0d48:	20000084 	.word	0x20000084
 80a0d4c:	080a18e4 	.word	0x080a18e4

080a0d50 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0d50:	2300      	movs	r3, #0
 80a0d52:	6840      	ldr	r0, [r0, #4]
 80a0d54:	461a      	mov	r2, r3
 80a0d56:	f7ff bbfd 	b.w	80a0554 <network_connect>

080a0d5a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0d5a:	2200      	movs	r2, #0
 80a0d5c:	2102      	movs	r1, #2
 80a0d5e:	6840      	ldr	r0, [r0, #4]
 80a0d60:	f7ff bc08 	b.w	80a0574 <network_disconnect>

080a0d64 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0d64:	2200      	movs	r2, #0
 80a0d66:	6840      	ldr	r0, [r0, #4]
 80a0d68:	4611      	mov	r1, r2
 80a0d6a:	f7ff bbfb 	b.w	80a0564 <network_connecting>

080a0d6e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0d6e:	2200      	movs	r2, #0
 80a0d70:	6840      	ldr	r0, [r0, #4]
 80a0d72:	4611      	mov	r1, r2
 80a0d74:	f7ff bc06 	b.w	80a0584 <network_ready>

080a0d78 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0d78:	2300      	movs	r3, #0
 80a0d7a:	6840      	ldr	r0, [r0, #4]
 80a0d7c:	461a      	mov	r2, r3
 80a0d7e:	4619      	mov	r1, r3
 80a0d80:	f7ff bc08 	b.w	80a0594 <network_on>

080a0d84 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0d84:	2300      	movs	r3, #0
 80a0d86:	6840      	ldr	r0, [r0, #4]
 80a0d88:	461a      	mov	r2, r3
 80a0d8a:	4619      	mov	r1, r3
 80a0d8c:	f7ff bc0a 	b.w	80a05a4 <network_off>

080a0d90 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0d90:	2200      	movs	r2, #0
 80a0d92:	6840      	ldr	r0, [r0, #4]
 80a0d94:	f081 0101 	eor.w	r1, r1, #1
 80a0d98:	f7ff bc0c 	b.w	80a05b4 <network_listen>

080a0d9c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0d9c:	2200      	movs	r2, #0
 80a0d9e:	6840      	ldr	r0, [r0, #4]
 80a0da0:	f7ff bc18 	b.w	80a05d4 <network_set_listen_timeout>

080a0da4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0da4:	2200      	movs	r2, #0
 80a0da6:	6840      	ldr	r0, [r0, #4]
 80a0da8:	4611      	mov	r1, r2
 80a0daa:	f7ff bc1b 	b.w	80a05e4 <network_get_listen_timeout>

080a0dae <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0dae:	2200      	movs	r2, #0
 80a0db0:	6840      	ldr	r0, [r0, #4]
 80a0db2:	4611      	mov	r1, r2
 80a0db4:	f7ff bc06 	b.w	80a05c4 <network_listening>

080a0db8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0db8:	b570      	push	{r4, r5, r6, lr}
 80a0dba:	4615      	mov	r5, r2
 80a0dbc:	b08e      	sub	sp, #56	; 0x38
 80a0dbe:	4604      	mov	r4, r0
    IPAddress addr;
 80a0dc0:	a808      	add	r0, sp, #32
 80a0dc2:	f7ff ff7b 	bl	80a0cbc <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0dc6:	2211      	movs	r2, #17
 80a0dc8:	2100      	movs	r1, #0
 80a0dca:	a803      	add	r0, sp, #12
 80a0dcc:	f000 fce0 	bl	80a1790 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0dd0:	2600      	movs	r6, #0
 80a0dd2:	4628      	mov	r0, r5
 80a0dd4:	f000 fd23 	bl	80a181e <strlen>
 80a0dd8:	4b0a      	ldr	r3, [pc, #40]	; (80a0e04 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0dda:	9600      	str	r6, [sp, #0]
 80a0ddc:	b281      	uxth	r1, r0
 80a0dde:	685b      	ldr	r3, [r3, #4]
 80a0de0:	4628      	mov	r0, r5
 80a0de2:	aa03      	add	r2, sp, #12
 80a0de4:	f7ff fb5a 	bl	80a049c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0de8:	b130      	cbz	r0, 80a0df8 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a0dea:	4631      	mov	r1, r6
 80a0dec:	4620      	mov	r0, r4
 80a0dee:	f7ff ff85 	bl	80a0cfc <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0df2:	4620      	mov	r0, r4
 80a0df4:	b00e      	add	sp, #56	; 0x38
 80a0df6:	bd70      	pop	{r4, r5, r6, pc}
 80a0df8:	4620      	mov	r0, r4
 80a0dfa:	a903      	add	r1, sp, #12
 80a0dfc:	f7ff ff6c 	bl	80a0cd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a0e00:	e7f7      	b.n	80a0df2 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a0e02:	bf00      	nop
 80a0e04:	20000508 	.word	0x20000508

080a0e08 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0e08:	4b02      	ldr	r3, [pc, #8]	; (80a0e14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0e0a:	4a03      	ldr	r2, [pc, #12]	; (80a0e18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0e0c:	601a      	str	r2, [r3, #0]
 80a0e0e:	2200      	movs	r2, #0
 80a0e10:	605a      	str	r2, [r3, #4]

} // spark
 80a0e12:	4770      	bx	lr
 80a0e14:	20000088 	.word	0x20000088
 80a0e18:	080a18f0 	.word	0x080a18f0

080a0e1c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e1e:	4606      	mov	r6, r0
 80a0e20:	460d      	mov	r5, r1
  size_t n = 0;
 80a0e22:	2400      	movs	r4, #0
 80a0e24:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0e26:	42bd      	cmp	r5, r7
 80a0e28:	d00c      	beq.n	80a0e44 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0e2a:	6833      	ldr	r3, [r6, #0]
 80a0e2c:	4630      	mov	r0, r6
 80a0e2e:	689b      	ldr	r3, [r3, #8]
 80a0e30:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0e34:	4798      	blx	r3
     if (chunk>=0)
 80a0e36:	1e03      	subs	r3, r0, #0
 80a0e38:	db01      	blt.n	80a0e3e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0e3a:	441c      	add	r4, r3
  while (size--) {
 80a0e3c:	e7f3      	b.n	80a0e26 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0e3e:	2c00      	cmp	r4, #0
 80a0e40:	bf08      	it	eq
 80a0e42:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0e44:	4620      	mov	r0, r4
 80a0e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e48 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a0e48:	b570      	push	{r4, r5, r6, lr}
 80a0e4a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0e4c:	460c      	mov	r4, r1
    }
 80a0e4e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0e50:	b149      	cbz	r1, 80a0e66 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0e52:	f000 fce4 	bl	80a181e <strlen>
 80a0e56:	682b      	ldr	r3, [r5, #0]
 80a0e58:	4602      	mov	r2, r0
 80a0e5a:	4621      	mov	r1, r4
 80a0e5c:	4628      	mov	r0, r5
    }
 80a0e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0e62:	68db      	ldr	r3, [r3, #12]
 80a0e64:	4718      	bx	r3
    }
 80a0e66:	bd70      	pop	{r4, r5, r6, pc}

080a0e68 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a0e68:	b508      	push	{r3, lr}
  return write(str);
 80a0e6a:	f7ff ffed 	bl	80a0e48 <_ZN5Print5writeEPKc>
}
 80a0e6e:	bd08      	pop	{r3, pc}

080a0e70 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a0e70:	6803      	ldr	r3, [r0, #0]
 80a0e72:	689b      	ldr	r3, [r3, #8]
 80a0e74:	4718      	bx	r3

080a0e76 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0e76:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0e78:	2a01      	cmp	r2, #1
 80a0e7a:	bf98      	it	ls
 80a0e7c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0e7e:	b530      	push	{r4, r5, lr}
 80a0e80:	b08b      	sub	sp, #44	; 0x2c
 80a0e82:	460c      	mov	r4, r1
  *str = '\0';
 80a0e84:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0e88:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0e8a:	4625      	mov	r5, r4
 80a0e8c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0e90:	fb04 5312 	mls	r3, r4, r2, r5
 80a0e94:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0e96:	2b09      	cmp	r3, #9
 80a0e98:	bf94      	ite	ls
 80a0e9a:	3330      	addls	r3, #48	; 0x30
 80a0e9c:	3337      	addhi	r3, #55	; 0x37
 80a0e9e:	b2db      	uxtb	r3, r3
  } while(n);
 80a0ea0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0ea2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0ea6:	d9f0      	bls.n	80a0e8a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0ea8:	f7ff ffce 	bl	80a0e48 <_ZN5Print5writeEPKc>
}
 80a0eac:	b00b      	add	sp, #44	; 0x2c
 80a0eae:	bd30      	pop	{r4, r5, pc}

080a0eb0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0eb0:	b510      	push	{r4, lr}
 80a0eb2:	4604      	mov	r4, r0
 80a0eb4:	f7ff fbf3 	bl	80a069e <_ZNSt14_Function_baseD1Ev>
 80a0eb8:	4620      	mov	r0, r4
 80a0eba:	bd10      	pop	{r4, pc}

080a0ebc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a0ebc:	2300      	movs	r3, #0
 80a0ebe:	4803      	ldr	r0, [pc, #12]	; (80a0ecc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0ec0:	4a03      	ldr	r2, [pc, #12]	; (80a0ed0 <_GLOBAL__sub_I_RGB+0x14>)
 80a0ec2:	4904      	ldr	r1, [pc, #16]	; (80a0ed4 <_GLOBAL__sub_I_RGB+0x18>)
 80a0ec4:	6083      	str	r3, [r0, #8]
 80a0ec6:	f000 bc3b 	b.w	80a1740 <__aeabi_atexit>
 80a0eca:	bf00      	nop
 80a0ecc:	20000090 	.word	0x20000090
 80a0ed0:	20000070 	.word	0x20000070
 80a0ed4:	080a0eb1 	.word	0x080a0eb1

080a0ed8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0ed8:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0eda:	2600      	movs	r6, #0
 80a0edc:	4604      	mov	r4, r0
 80a0ede:	460d      	mov	r5, r1
 80a0ee0:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0ee4:	f7ff f9e0 	bl	80a02a8 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0ee8:	4628      	mov	r0, r5
    _spi = spi;
 80a0eea:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0eec:	f7ff fa56 	bl	80a039c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0ef0:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0ef2:	6066      	str	r6, [r4, #4]
}
 80a0ef4:	bd70      	pop	{r4, r5, r6, pc}

080a0ef6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0ef6:	b510      	push	{r4, lr}
 80a0ef8:	4604      	mov	r4, r0
{
	free(buffer);
 80a0efa:	6800      	ldr	r0, [r0, #0]
 80a0efc:	f7ff fb82 	bl	80a0604 <free>
}
 80a0f00:	4620      	mov	r0, r4
 80a0f02:	bd10      	pop	{r4, pc}

080a0f04 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0f04:	b510      	push	{r4, lr}
 80a0f06:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0f08:	6800      	ldr	r0, [r0, #0]
 80a0f0a:	b108      	cbz	r0, 80a0f10 <_ZN6String10invalidateEv+0xc>
 80a0f0c:	f7ff fb7a 	bl	80a0604 <free>
	buffer = NULL;
 80a0f10:	2300      	movs	r3, #0
	capacity = len = 0;
 80a0f12:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a0f16:	6023      	str	r3, [r4, #0]
}
 80a0f18:	bd10      	pop	{r4, pc}

080a0f1a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0f1a:	b538      	push	{r3, r4, r5, lr}
 80a0f1c:	4604      	mov	r4, r0
 80a0f1e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0f20:	6800      	ldr	r0, [r0, #0]
 80a0f22:	3101      	adds	r1, #1
 80a0f24:	f7ff fb76 	bl	80a0614 <realloc>
	if (newbuffer) {
 80a0f28:	b110      	cbz	r0, 80a0f30 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0f2a:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a0f2e:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0f30:	bd38      	pop	{r3, r4, r5, pc}

080a0f32 <_ZN6String7reserveEj>:
{
 80a0f32:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0f34:	6803      	ldr	r3, [r0, #0]
{
 80a0f36:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0f38:	b123      	cbz	r3, 80a0f44 <_ZN6String7reserveEj+0x12>
 80a0f3a:	6843      	ldr	r3, [r0, #4]
 80a0f3c:	428b      	cmp	r3, r1
 80a0f3e:	d301      	bcc.n	80a0f44 <_ZN6String7reserveEj+0x12>
 80a0f40:	2001      	movs	r0, #1
}
 80a0f42:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a0f44:	4620      	mov	r0, r4
 80a0f46:	f7ff ffe8 	bl	80a0f1a <_ZN6String12changeBufferEj>
 80a0f4a:	2800      	cmp	r0, #0
 80a0f4c:	d0f9      	beq.n	80a0f42 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a0f4e:	68a3      	ldr	r3, [r4, #8]
 80a0f50:	2b00      	cmp	r3, #0
 80a0f52:	d1f5      	bne.n	80a0f40 <_ZN6String7reserveEj+0xe>
 80a0f54:	6822      	ldr	r2, [r4, #0]
 80a0f56:	7013      	strb	r3, [r2, #0]
 80a0f58:	e7f2      	b.n	80a0f40 <_ZN6String7reserveEj+0xe>

080a0f5a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0f5a:	b570      	push	{r4, r5, r6, lr}
 80a0f5c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0f5e:	4611      	mov	r1, r2
{
 80a0f60:	4604      	mov	r4, r0
 80a0f62:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0f64:	f7ff ffe5 	bl	80a0f32 <_ZN6String7reserveEj>
 80a0f68:	b920      	cbnz	r0, 80a0f74 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a0f6a:	4620      	mov	r0, r4
 80a0f6c:	f7ff ffca 	bl	80a0f04 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a0f70:	4620      	mov	r0, r4
 80a0f72:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a0f74:	462a      	mov	r2, r5
 80a0f76:	4631      	mov	r1, r6
 80a0f78:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a0f7a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0f7c:	f000 fbfa 	bl	80a1774 <memcpy>
	buffer[len] = 0;
 80a0f80:	2100      	movs	r1, #0
 80a0f82:	6822      	ldr	r2, [r4, #0]
 80a0f84:	68a3      	ldr	r3, [r4, #8]
 80a0f86:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a0f88:	e7f2      	b.n	80a0f70 <_ZN6String4copyEPKcj+0x16>

080a0f8a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a0f8a:	b538      	push	{r3, r4, r5, lr}
 80a0f8c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0f8e:	460c      	mov	r4, r1
 80a0f90:	b149      	cbz	r1, 80a0fa6 <_ZN6StringaSEPKc+0x1c>
 80a0f92:	4608      	mov	r0, r1
 80a0f94:	f000 fc43 	bl	80a181e <strlen>
 80a0f98:	4621      	mov	r1, r4
 80a0f9a:	4602      	mov	r2, r0
 80a0f9c:	4628      	mov	r0, r5
 80a0f9e:	f7ff ffdc 	bl	80a0f5a <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a0fa2:	4628      	mov	r0, r5
 80a0fa4:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a0fa6:	f7ff ffad 	bl	80a0f04 <_ZN6String10invalidateEv>
 80a0faa:	e7fa      	b.n	80a0fa2 <_ZN6StringaSEPKc+0x18>

080a0fac <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80a0fac:	b510      	push	{r4, lr}
	buffer = NULL;
 80a0fae:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80a0fb0:	4604      	mov	r4, r0
 80a0fb2:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a0fb4:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a0fb8:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a0fba:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80a0fbc:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80a0fbe:	a901      	add	r1, sp, #4
 80a0fc0:	f000 fa1f 	bl	80a1402 <itoa>
	*this = buf;
 80a0fc4:	4620      	mov	r0, r4
 80a0fc6:	a901      	add	r1, sp, #4
 80a0fc8:	f7ff ffdf 	bl	80a0f8a <_ZN6StringaSEPKc>
}
 80a0fcc:	4620      	mov	r0, r4
 80a0fce:	b00a      	add	sp, #40	; 0x28
 80a0fd0:	bd10      	pop	{r4, pc}

080a0fd2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0fd2:	b510      	push	{r4, lr}
 80a0fd4:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0fd6:	6800      	ldr	r0, [r0, #0]
 80a0fd8:	b118      	cbz	r0, 80a0fe2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a0fda:	f7ff fb13 	bl	80a0604 <free>
            wakeupSource_ = nullptr;
 80a0fde:	2300      	movs	r3, #0
 80a0fe0:	6023      	str	r3, [r4, #0]
        }
    }
 80a0fe2:	bd10      	pop	{r4, pc}

080a0fe4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0fe4:	b510      	push	{r4, lr}
 80a0fe6:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a0fe8:	f7ff fff3 	bl	80a0fd2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a0fec:	4620      	mov	r0, r4
 80a0fee:	bd10      	pop	{r4, pc}

080a0ff0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0ff0:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a0ff2:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0ff4:	b510      	push	{r4, lr}
 80a0ff6:	4b08      	ldr	r3, [pc, #32]	; (80a1018 <_GLOBAL__sub_I_System+0x28>)
 80a0ff8:	4c08      	ldr	r4, [pc, #32]	; (80a101c <_GLOBAL__sub_I_System+0x2c>)
 80a0ffa:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a0ffc:	4b08      	ldr	r3, [pc, #32]	; (80a1020 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a0ffe:	6020      	str	r0, [r4, #0]
 80a1000:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a1002:	71a0      	strb	r0, [r4, #6]
 80a1004:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1006:	f7ff fa51 	bl	80a04ac <set_system_mode>
SystemClass System;
 80a100a:	4620      	mov	r0, r4
 80a100c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a1010:	4a04      	ldr	r2, [pc, #16]	; (80a1024 <_GLOBAL__sub_I_System+0x34>)
 80a1012:	4905      	ldr	r1, [pc, #20]	; (80a1028 <_GLOBAL__sub_I_System+0x38>)
 80a1014:	f000 bb94 	b.w	80a1740 <__aeabi_atexit>
 80a1018:	200000ac 	.word	0x200000ac
 80a101c:	200000a0 	.word	0x200000a0
 80a1020:	ffff0000 	.word	0xffff0000
 80a1024:	20000070 	.word	0x20000070
 80a1028:	080a0fe5 	.word	0x080a0fe5

080a102c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a102c:	4b02      	ldr	r3, [pc, #8]	; (80a1038 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a102e:	681a      	ldr	r2, [r3, #0]
 80a1030:	4b02      	ldr	r3, [pc, #8]	; (80a103c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1032:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1034:	4770      	bx	lr
 80a1036:	bf00      	nop
 80a1038:	20000008 	.word	0x20000008
 80a103c:	200000b0 	.word	0x200000b0

080a1040 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1040:	4770      	bx	lr

080a1042 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1042:	7441      	strb	r1, [r0, #17]
}
 80a1044:	4770      	bx	lr

080a1046 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a1046:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1048:	7c00      	ldrb	r0, [r0, #16]
 80a104a:	f7ff f9ef 	bl	80a042c <hal_usart_available_data_for_write>
}
 80a104e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1052:	bd08      	pop	{r3, pc}

080a1054 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1054:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1056:	7c00      	ldrb	r0, [r0, #16]
 80a1058:	f7ff f9c0 	bl	80a03dc <hal_usart_available>
}
 80a105c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1060:	bd08      	pop	{r3, pc}

080a1062 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1062:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1064:	7c00      	ldrb	r0, [r0, #16]
 80a1066:	f7ff f9c9 	bl	80a03fc <hal_usart_peek>
}
 80a106a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a106e:	bd08      	pop	{r3, pc}

080a1070 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1070:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1072:	7c00      	ldrb	r0, [r0, #16]
 80a1074:	f7ff f9ba 	bl	80a03ec <hal_usart_read>
}
 80a1078:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a107c:	bd08      	pop	{r3, pc}

080a107e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a107e:	7c00      	ldrb	r0, [r0, #16]
 80a1080:	f7ff b9c4 	b.w	80a040c <hal_usart_flush>

080a1084 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1084:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1086:	7c46      	ldrb	r6, [r0, #17]
{
 80a1088:	4604      	mov	r4, r0
 80a108a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a108c:	b12e      	cbz	r6, 80a109a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a108e:	4629      	mov	r1, r5
 80a1090:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1096:	f7ff b999 	b.w	80a03cc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a109a:	7c00      	ldrb	r0, [r0, #16]
 80a109c:	f7ff f9c6 	bl	80a042c <hal_usart_available_data_for_write>
 80a10a0:	2800      	cmp	r0, #0
 80a10a2:	dcf4      	bgt.n	80a108e <_ZN11USARTSerial5writeEh+0xa>
}
 80a10a4:	4630      	mov	r0, r6
 80a10a6:	bd70      	pop	{r4, r5, r6, pc}

080a10a8 <_ZN11USARTSerialD0Ev>:
 80a10a8:	b510      	push	{r4, lr}
 80a10aa:	4604      	mov	r4, r0
 80a10ac:	2114      	movs	r1, #20
 80a10ae:	f000 fb4c 	bl	80a174a <_ZdlPvj>
 80a10b2:	4620      	mov	r0, r4
 80a10b4:	bd10      	pop	{r4, pc}
	...

080a10b8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a10b8:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a10bc:	b510      	push	{r4, lr}
 80a10be:	4604      	mov	r4, r0
 80a10c0:	4608      	mov	r0, r1
 80a10c2:	4611      	mov	r1, r2
 80a10c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a10c8:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a10cc:	4a04      	ldr	r2, [pc, #16]	; (80a10e0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a10ce:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a10d0:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a10d2:	2201      	movs	r2, #1
 80a10d4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a10d6:	461a      	mov	r2, r3
 80a10d8:	f7ff f970 	bl	80a03bc <hal_usart_init>
}
 80a10dc:	4620      	mov	r0, r4
 80a10de:	bd10      	pop	{r4, pc}
 80a10e0:	080a1940 	.word	0x080a1940

080a10e4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a10e4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a10e6:	4d0d      	ldr	r5, [pc, #52]	; (80a111c <_Z22__fetch_global_Serial1v+0x38>)
 80a10e8:	7829      	ldrb	r1, [r5, #0]
 80a10ea:	f3bf 8f5b 	dmb	ish
 80a10ee:	f011 0401 	ands.w	r4, r1, #1
 80a10f2:	d111      	bne.n	80a1118 <_Z22__fetch_global_Serial1v+0x34>
 80a10f4:	4628      	mov	r0, r5
 80a10f6:	f7fe ffd4 	bl	80a00a2 <__cxa_guard_acquire>
 80a10fa:	b168      	cbz	r0, 80a1118 <_Z22__fetch_global_Serial1v+0x34>
 80a10fc:	4621      	mov	r1, r4
 80a10fe:	4a08      	ldr	r2, [pc, #32]	; (80a1120 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1100:	4b08      	ldr	r3, [pc, #32]	; (80a1124 <_Z22__fetch_global_Serial1v+0x40>)
 80a1102:	4809      	ldr	r0, [pc, #36]	; (80a1128 <_Z22__fetch_global_Serial1v+0x44>)
 80a1104:	f7ff ffd8 	bl	80a10b8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1108:	4628      	mov	r0, r5
 80a110a:	f7fe ffcf 	bl	80a00ac <__cxa_guard_release>
 80a110e:	4a07      	ldr	r2, [pc, #28]	; (80a112c <_Z22__fetch_global_Serial1v+0x48>)
 80a1110:	4907      	ldr	r1, [pc, #28]	; (80a1130 <_Z22__fetch_global_Serial1v+0x4c>)
 80a1112:	4805      	ldr	r0, [pc, #20]	; (80a1128 <_Z22__fetch_global_Serial1v+0x44>)
 80a1114:	f000 fb14 	bl	80a1740 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1118:	4803      	ldr	r0, [pc, #12]	; (80a1128 <_Z22__fetch_global_Serial1v+0x44>)
 80a111a:	bd38      	pop	{r3, r4, r5, pc}
 80a111c:	200000b4 	.word	0x200000b4
 80a1120:	200000b8 	.word	0x200000b8
 80a1124:	2000013c 	.word	0x2000013c
 80a1128:	200001c0 	.word	0x200001c0
 80a112c:	20000070 	.word	0x20000070
 80a1130:	080a1041 	.word	0x080a1041

080a1134 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1134:	7441      	strb	r1, [r0, #17]
}
 80a1136:	4770      	bx	lr

080a1138 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1138:	4770      	bx	lr

080a113a <_ZN9USBSerial4readEv>:
{
 80a113a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a113c:	2100      	movs	r1, #0
 80a113e:	7c00      	ldrb	r0, [r0, #16]
 80a1140:	f7ff f994 	bl	80a046c <HAL_USB_USART_Receive_Data>
}
 80a1144:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1148:	bd08      	pop	{r3, pc}

080a114a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a114a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a114c:	2101      	movs	r1, #1
 80a114e:	7c00      	ldrb	r0, [r0, #16]
 80a1150:	f7ff f98c 	bl	80a046c <HAL_USB_USART_Receive_Data>
}
 80a1154:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1158:	bd08      	pop	{r3, pc}

080a115a <_ZN9USBSerial17availableForWriteEv>:
{
 80a115a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a115c:	7c00      	ldrb	r0, [r0, #16]
 80a115e:	f7ff f97d 	bl	80a045c <HAL_USB_USART_Available_Data_For_Write>
}
 80a1162:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1166:	bd08      	pop	{r3, pc}

080a1168 <_ZN9USBSerial9availableEv>:
{
 80a1168:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a116a:	7c00      	ldrb	r0, [r0, #16]
 80a116c:	f7ff f96e 	bl	80a044c <HAL_USB_USART_Available_Data>
}
 80a1170:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1174:	bd08      	pop	{r3, pc}

080a1176 <_ZN9USBSerial5writeEh>:
{
 80a1176:	b538      	push	{r3, r4, r5, lr}
 80a1178:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a117a:	7c00      	ldrb	r0, [r0, #16]
{
 80a117c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a117e:	f7ff f96d 	bl	80a045c <HAL_USB_USART_Available_Data_For_Write>
 80a1182:	2800      	cmp	r0, #0
 80a1184:	dc01      	bgt.n	80a118a <_ZN9USBSerial5writeEh+0x14>
 80a1186:	7c60      	ldrb	r0, [r4, #17]
 80a1188:	b128      	cbz	r0, 80a1196 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a118a:	4629      	mov	r1, r5
 80a118c:	7c20      	ldrb	r0, [r4, #16]
 80a118e:	f7ff f975 	bl	80a047c <HAL_USB_USART_Send_Data>
 80a1192:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1196:	bd38      	pop	{r3, r4, r5, pc}

080a1198 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1198:	7c00      	ldrb	r0, [r0, #16]
 80a119a:	f7ff b977 	b.w	80a048c <HAL_USB_USART_Flush_Data>

080a119e <_ZN9USBSerialD0Ev>:
 80a119e:	b510      	push	{r4, lr}
 80a11a0:	4604      	mov	r4, r0
 80a11a2:	2114      	movs	r1, #20
 80a11a4:	f000 fad1 	bl	80a174a <_ZdlPvj>
 80a11a8:	4620      	mov	r0, r4
 80a11aa:	bd10      	pop	{r4, pc}

080a11ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a11ac:	b510      	push	{r4, lr}
 80a11ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a11b2:	4604      	mov	r4, r0
 80a11b4:	4608      	mov	r0, r1
 80a11b6:	2100      	movs	r1, #0
 80a11b8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a11bc:	4b04      	ldr	r3, [pc, #16]	; (80a11d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a11be:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a11c0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a11c2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a11c4:	4611      	mov	r1, r2
  _blocking = true;
 80a11c6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a11c8:	f7ff f938 	bl	80a043c <HAL_USB_USART_Init>
}
 80a11cc:	4620      	mov	r0, r4
 80a11ce:	bd10      	pop	{r4, pc}
 80a11d0:	080a1970 	.word	0x080a1970

080a11d4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a11d4:	b510      	push	{r4, lr}
 80a11d6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a11d8:	2214      	movs	r2, #20
 80a11da:	2100      	movs	r1, #0
 80a11dc:	f000 fad8 	bl	80a1790 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a11e0:	4b05      	ldr	r3, [pc, #20]	; (80a11f8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a11e2:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a11e4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a11e6:	4b05      	ldr	r3, [pc, #20]	; (80a11fc <_Z19acquireSerialBufferv+0x28>)
 80a11e8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a11ea:	f240 1301 	movw	r3, #257	; 0x101
 80a11ee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a11f0:	2381      	movs	r3, #129	; 0x81
 80a11f2:	8223      	strh	r3, [r4, #16]
}
 80a11f4:	bd10      	pop	{r4, pc}
 80a11f6:	bf00      	nop
 80a11f8:	20000204 	.word	0x20000204
 80a11fc:	20000305 	.word	0x20000305

080a1200 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1200:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1202:	4d0f      	ldr	r5, [pc, #60]	; (80a1240 <_Z16_fetch_usbserialv+0x40>)
{
 80a1204:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1206:	a801      	add	r0, sp, #4
 80a1208:	f7ff ffe4 	bl	80a11d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a120c:	7829      	ldrb	r1, [r5, #0]
 80a120e:	f3bf 8f5b 	dmb	ish
 80a1212:	f011 0401 	ands.w	r4, r1, #1
 80a1216:	d110      	bne.n	80a123a <_Z16_fetch_usbserialv+0x3a>
 80a1218:	4628      	mov	r0, r5
 80a121a:	f7fe ff42 	bl	80a00a2 <__cxa_guard_acquire>
 80a121e:	b160      	cbz	r0, 80a123a <_Z16_fetch_usbserialv+0x3a>
 80a1220:	4621      	mov	r1, r4
 80a1222:	aa01      	add	r2, sp, #4
 80a1224:	4807      	ldr	r0, [pc, #28]	; (80a1244 <_Z16_fetch_usbserialv+0x44>)
 80a1226:	f7ff ffc1 	bl	80a11ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a122a:	4628      	mov	r0, r5
 80a122c:	f7fe ff3e 	bl	80a00ac <__cxa_guard_release>
 80a1230:	4a05      	ldr	r2, [pc, #20]	; (80a1248 <_Z16_fetch_usbserialv+0x48>)
 80a1232:	4906      	ldr	r1, [pc, #24]	; (80a124c <_Z16_fetch_usbserialv+0x4c>)
 80a1234:	4803      	ldr	r0, [pc, #12]	; (80a1244 <_Z16_fetch_usbserialv+0x44>)
 80a1236:	f000 fa83 	bl	80a1740 <__aeabi_atexit>
	return _usbserial;
}
 80a123a:	4802      	ldr	r0, [pc, #8]	; (80a1244 <_Z16_fetch_usbserialv+0x44>)
 80a123c:	b007      	add	sp, #28
 80a123e:	bd30      	pop	{r4, r5, pc}
 80a1240:	200001d4 	.word	0x200001d4
 80a1244:	200001dc 	.word	0x200001dc
 80a1248:	20000070 	.word	0x20000070
 80a124c:	080a1139 	.word	0x080a1139

080a1250 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1250:	b510      	push	{r4, lr}
 80a1252:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1254:	2214      	movs	r2, #20
 80a1256:	2100      	movs	r1, #0
 80a1258:	f000 fa9a 	bl	80a1790 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a125c:	4b05      	ldr	r3, [pc, #20]	; (80a1274 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a125e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1260:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1262:	4b05      	ldr	r3, [pc, #20]	; (80a1278 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1264:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1266:	f240 1301 	movw	r3, #257	; 0x101
 80a126a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a126c:	2381      	movs	r3, #129	; 0x81
 80a126e:	8223      	strh	r3, [r4, #16]
}
 80a1270:	bd10      	pop	{r4, pc}
 80a1272:	bf00      	nop
 80a1274:	20000386 	.word	0x20000386
 80a1278:	20000487 	.word	0x20000487

080a127c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a127c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a127e:	4c0f      	ldr	r4, [pc, #60]	; (80a12bc <_Z17_fetch_usbserial1v+0x40>)
{
 80a1280:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1282:	a801      	add	r0, sp, #4
 80a1284:	f7ff ffe4 	bl	80a1250 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1288:	7823      	ldrb	r3, [r4, #0]
 80a128a:	f3bf 8f5b 	dmb	ish
 80a128e:	07db      	lsls	r3, r3, #31
 80a1290:	d410      	bmi.n	80a12b4 <_Z17_fetch_usbserial1v+0x38>
 80a1292:	4620      	mov	r0, r4
 80a1294:	f7fe ff05 	bl	80a00a2 <__cxa_guard_acquire>
 80a1298:	b160      	cbz	r0, 80a12b4 <_Z17_fetch_usbserial1v+0x38>
 80a129a:	2101      	movs	r1, #1
 80a129c:	aa01      	add	r2, sp, #4
 80a129e:	4808      	ldr	r0, [pc, #32]	; (80a12c0 <_Z17_fetch_usbserial1v+0x44>)
 80a12a0:	f7ff ff84 	bl	80a11ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a12a4:	4620      	mov	r0, r4
 80a12a6:	f7fe ff01 	bl	80a00ac <__cxa_guard_release>
 80a12aa:	4a06      	ldr	r2, [pc, #24]	; (80a12c4 <_Z17_fetch_usbserial1v+0x48>)
 80a12ac:	4906      	ldr	r1, [pc, #24]	; (80a12c8 <_Z17_fetch_usbserial1v+0x4c>)
 80a12ae:	4804      	ldr	r0, [pc, #16]	; (80a12c0 <_Z17_fetch_usbserial1v+0x44>)
 80a12b0:	f000 fa46 	bl	80a1740 <__aeabi_atexit>
  return _usbserial1;
}
 80a12b4:	4802      	ldr	r0, [pc, #8]	; (80a12c0 <_Z17_fetch_usbserial1v+0x44>)
 80a12b6:	b006      	add	sp, #24
 80a12b8:	bd10      	pop	{r4, pc}
 80a12ba:	bf00      	nop
 80a12bc:	200001d8 	.word	0x200001d8
 80a12c0:	200001f0 	.word	0x200001f0
 80a12c4:	20000070 	.word	0x20000070
 80a12c8:	080a1139 	.word	0x080a1139

080a12cc <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a12cc:	2200      	movs	r2, #0
 80a12ce:	6840      	ldr	r0, [r0, #4]
 80a12d0:	4611      	mov	r1, r2
 80a12d2:	f7ff b957 	b.w	80a0584 <network_ready>

080a12d6 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a12d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a12d8:	4615      	mov	r5, r2
 80a12da:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a12dc:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a12de:	460e      	mov	r6, r1
 80a12e0:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a12e2:	2100      	movs	r1, #0
 80a12e4:	a803      	add	r0, sp, #12
 80a12e6:	f000 fa53 	bl	80a1790 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a12ea:	4628      	mov	r0, r5
 80a12ec:	f000 fa97 	bl	80a181e <strlen>
 80a12f0:	2700      	movs	r7, #0
 80a12f2:	b281      	uxth	r1, r0
 80a12f4:	6873      	ldr	r3, [r6, #4]
 80a12f6:	4628      	mov	r0, r5
 80a12f8:	9700      	str	r7, [sp, #0]
 80a12fa:	aa03      	add	r2, sp, #12
 80a12fc:	f7ff f8ce 	bl	80a049c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1300:	b130      	cbz	r0, 80a1310 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a1302:	4639      	mov	r1, r7
 80a1304:	4620      	mov	r0, r4
 80a1306:	f7ff fcf9 	bl	80a0cfc <_ZN9IPAddressC1Em>
    }
 80a130a:	4620      	mov	r0, r4
 80a130c:	b009      	add	sp, #36	; 0x24
 80a130e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1310:	4620      	mov	r0, r4
 80a1312:	a903      	add	r1, sp, #12
 80a1314:	f7ff fce0 	bl	80a0cd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a1318:	e7f7      	b.n	80a130a <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a131a <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a131a:	2200      	movs	r2, #0
 80a131c:	6840      	ldr	r0, [r0, #4]
 80a131e:	4611      	mov	r1, r2
 80a1320:	f7ff b950 	b.w	80a05c4 <network_listening>

080a1324 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1324:	2200      	movs	r2, #0
 80a1326:	6840      	ldr	r0, [r0, #4]
 80a1328:	4611      	mov	r1, r2
 80a132a:	f7ff b95b 	b.w	80a05e4 <network_get_listen_timeout>

080a132e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a132e:	2200      	movs	r2, #0
 80a1330:	6840      	ldr	r0, [r0, #4]
 80a1332:	f7ff b94f 	b.w	80a05d4 <network_set_listen_timeout>

080a1336 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1336:	2200      	movs	r2, #0
 80a1338:	6840      	ldr	r0, [r0, #4]
 80a133a:	f081 0101 	eor.w	r1, r1, #1
 80a133e:	f7ff b939 	b.w	80a05b4 <network_listen>

080a1342 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a1342:	2300      	movs	r3, #0
 80a1344:	6840      	ldr	r0, [r0, #4]
 80a1346:	461a      	mov	r2, r3
 80a1348:	4619      	mov	r1, r3
 80a134a:	f7ff b92b 	b.w	80a05a4 <network_off>

080a134e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a134e:	2300      	movs	r3, #0
 80a1350:	6840      	ldr	r0, [r0, #4]
 80a1352:	461a      	mov	r2, r3
 80a1354:	4619      	mov	r1, r3
 80a1356:	f7ff b91d 	b.w	80a0594 <network_on>

080a135a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a135a:	2200      	movs	r2, #0
 80a135c:	6840      	ldr	r0, [r0, #4]
 80a135e:	4611      	mov	r1, r2
 80a1360:	f7ff b900 	b.w	80a0564 <network_connecting>

080a1364 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1364:	2200      	movs	r2, #0
 80a1366:	2102      	movs	r1, #2
 80a1368:	6840      	ldr	r0, [r0, #4]
 80a136a:	f7ff b903 	b.w	80a0574 <network_disconnect>

080a136e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a136e:	2300      	movs	r3, #0
 80a1370:	6840      	ldr	r0, [r0, #4]
 80a1372:	461a      	mov	r2, r3
 80a1374:	f7ff b8ee 	b.w	80a0554 <network_connect>

080a1378 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1378:	2204      	movs	r2, #4
 80a137a:	4b02      	ldr	r3, [pc, #8]	; (80a1384 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a137c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a137e:	4a02      	ldr	r2, [pc, #8]	; (80a1388 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1380:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a1382:	4770      	bx	lr
 80a1384:	20000508 	.word	0x20000508
 80a1388:	080a19a0 	.word	0x080a19a0

080a138c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a138c:	b510      	push	{r4, lr}
 80a138e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a1390:	f000 fa45 	bl	80a181e <strlen>
 80a1394:	1e43      	subs	r3, r0, #1
 80a1396:	4620      	mov	r0, r4
 80a1398:	4423      	add	r3, r4
	while(i<j){
 80a139a:	4283      	cmp	r3, r0
 80a139c:	d906      	bls.n	80a13ac <_Z11str_reversePc+0x20>
		c = *i;
 80a139e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a13a0:	7819      	ldrb	r1, [r3, #0]
 80a13a2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a13a6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a13aa:	e7f6      	b.n	80a139a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a13ac:	bd10      	pop	{r4, pc}

080a13ae <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a13ae:	b570      	push	{r4, r5, r6, lr}
 80a13b0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a13b2:	1e91      	subs	r1, r2, #2
 80a13b4:	2922      	cmp	r1, #34	; 0x22
 80a13b6:	d822      	bhi.n	80a13fe <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a13b8:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a13ba:	b168      	cbz	r0, 80a13d8 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a13bc:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a13c0:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a13c4:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a13c6:	2809      	cmp	r0, #9
                *ptr += '0';
 80a13c8:	bf94      	ite	ls
 80a13ca:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a13cc:	3157      	addhi	r1, #87	; 0x57
 80a13ce:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a13d0:	4630      	mov	r0, r6
 80a13d2:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a13d6:	e7f0      	b.n	80a13ba <ultoa+0xc>
 80a13d8:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a13da:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a13dc:	4423      	add	r3, r4
 80a13de:	4293      	cmp	r3, r2
 80a13e0:	d902      	bls.n	80a13e8 <ultoa+0x3a>
            *ptr++ = '0';
 80a13e2:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a13e6:	e7fa      	b.n	80a13de <ultoa+0x30>
 80a13e8:	1b5a      	subs	r2, r3, r5
 80a13ea:	42ab      	cmp	r3, r5
 80a13ec:	bf38      	it	cc
 80a13ee:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a13f0:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a13f2:	4620      	mov	r0, r4
	*ptr = '\0';
 80a13f4:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a13f6:	f7ff ffc9 	bl	80a138c <_Z11str_reversePc>
	return buffer;
 80a13fa:	4620      	mov	r0, r4
}
 80a13fc:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a13fe:	2000      	movs	r0, #0
 80a1400:	e7fc      	b.n	80a13fc <ultoa+0x4e>

080a1402 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a1402:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a1404:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a1406:	460c      	mov	r4, r1
 80a1408:	4615      	mov	r5, r2
	if(a<0){
 80a140a:	da0d      	bge.n	80a1428 <itoa+0x26>
		*buffer = '-';
 80a140c:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a140e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a1412:	bf0c      	ite	eq
 80a1414:	4618      	moveq	r0, r3
 80a1416:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a1418:	2301      	movs	r3, #1
		*buffer = '-';
 80a141a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80a141c:	462a      	mov	r2, r5
 80a141e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80a1420:	f7ff ffc5 	bl	80a13ae <ultoa>
	}
	return buffer;
}
 80a1424:	4620      	mov	r0, r4
 80a1426:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80a1428:	2301      	movs	r3, #1
 80a142a:	e7f9      	b.n	80a1420 <itoa+0x1e>

080a142c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a142c:	4b01      	ldr	r3, [pc, #4]	; (80a1434 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a142e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a1430:	4770      	bx	lr
 80a1432:	bf00      	nop
 80a1434:	2000000c 	.word	0x2000000c

080a1438 <serialEventRun>:
{
 80a1438:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a143a:	4b13      	ldr	r3, [pc, #76]	; (80a1488 <serialEventRun+0x50>)
 80a143c:	b143      	cbz	r3, 80a1450 <serialEventRun+0x18>
 80a143e:	f7ff fedf 	bl	80a1200 <_Z16_fetch_usbserialv>
 80a1442:	6803      	ldr	r3, [r0, #0]
 80a1444:	691b      	ldr	r3, [r3, #16]
 80a1446:	4798      	blx	r3
 80a1448:	2800      	cmp	r0, #0
 80a144a:	dd01      	ble.n	80a1450 <serialEventRun+0x18>
        serialEvent();
 80a144c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a1450:	4b0e      	ldr	r3, [pc, #56]	; (80a148c <serialEventRun+0x54>)
 80a1452:	b143      	cbz	r3, 80a1466 <serialEventRun+0x2e>
 80a1454:	f7ff fe46 	bl	80a10e4 <_Z22__fetch_global_Serial1v>
 80a1458:	6803      	ldr	r3, [r0, #0]
 80a145a:	691b      	ldr	r3, [r3, #16]
 80a145c:	4798      	blx	r3
 80a145e:	2800      	cmp	r0, #0
 80a1460:	dd01      	ble.n	80a1466 <serialEventRun+0x2e>
        serialEvent1();
 80a1462:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a1466:	4b0a      	ldr	r3, [pc, #40]	; (80a1490 <serialEventRun+0x58>)
 80a1468:	b10b      	cbz	r3, 80a146e <serialEventRun+0x36>
 80a146a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a146e:	4b09      	ldr	r3, [pc, #36]	; (80a1494 <serialEventRun+0x5c>)
 80a1470:	b143      	cbz	r3, 80a1484 <serialEventRun+0x4c>
 80a1472:	f7ff ff03 	bl	80a127c <_Z17_fetch_usbserial1v>
 80a1476:	6803      	ldr	r3, [r0, #0]
 80a1478:	691b      	ldr	r3, [r3, #16]
 80a147a:	4798      	blx	r3
 80a147c:	2800      	cmp	r0, #0
 80a147e:	dd01      	ble.n	80a1484 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1480:	f3af 8000 	nop.w
}
 80a1484:	bd08      	pop	{r3, pc}
 80a1486:	bf00      	nop
	...

080a1498 <_post_loop>:
{
 80a1498:	b508      	push	{r3, lr}
	serialEventRun();
 80a149a:	f7ff ffcd 	bl	80a1438 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a149e:	f7fe ff1b 	bl	80a02d8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a14a2:	4b01      	ldr	r3, [pc, #4]	; (80a14a8 <_post_loop+0x10>)
 80a14a4:	6018      	str	r0, [r3, #0]
}
 80a14a6:	bd08      	pop	{r3, pc}
 80a14a8:	20000528 	.word	0x20000528

080a14ac <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a14ac:	4802      	ldr	r0, [pc, #8]	; (80a14b8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a14ae:	4a03      	ldr	r2, [pc, #12]	; (80a14bc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a14b0:	4903      	ldr	r1, [pc, #12]	; (80a14c0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a14b2:	1a12      	subs	r2, r2, r0
 80a14b4:	f000 b95e 	b.w	80a1774 <memcpy>
 80a14b8:	40024000 	.word	0x40024000
 80a14bc:	40024004 	.word	0x40024004
 80a14c0:	080a19f0 	.word	0x080a19f0

080a14c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a14c4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a14c6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a14c8:	461a      	mov	r2, r3
 80a14ca:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a14ce:	9300      	str	r3, [sp, #0]
 80a14d0:	f7ff f816 	bl	80a0500 <system_ctrl_set_result>
}
 80a14d4:	b003      	add	sp, #12
 80a14d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a14dc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a14dc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a14de:	8843      	ldrh	r3, [r0, #2]
 80a14e0:	2b0a      	cmp	r3, #10
 80a14e2:	d008      	beq.n	80a14f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a14e4:	2b50      	cmp	r3, #80	; 0x50
 80a14e6:	d10b      	bne.n	80a1500 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a14e8:	4b09      	ldr	r3, [pc, #36]	; (80a1510 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a14ea:	681b      	ldr	r3, [r3, #0]
 80a14ec:	b14b      	cbz	r3, 80a1502 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a14ee:	b003      	add	sp, #12
 80a14f0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a14f4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a14f6:	f7ff ffe5 	bl	80a14c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a14fa:	b003      	add	sp, #12
 80a14fc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1500:	2300      	movs	r3, #0
 80a1502:	461a      	mov	r2, r3
 80a1504:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1508:	9300      	str	r3, [sp, #0]
 80a150a:	f7fe fff9 	bl	80a0500 <system_ctrl_set_result>
}
 80a150e:	e7f4      	b.n	80a14fa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a1510:	20000514 	.word	0x20000514

080a1514 <module_user_init_hook>:
{
 80a1514:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1516:	4c12      	ldr	r4, [pc, #72]	; (80a1560 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1518:	2100      	movs	r1, #0
 80a151a:	4812      	ldr	r0, [pc, #72]	; (80a1564 <module_user_init_hook+0x50>)
 80a151c:	f7ff f892 	bl	80a0644 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1520:	4d11      	ldr	r5, [pc, #68]	; (80a1568 <module_user_init_hook+0x54>)
 80a1522:	6823      	ldr	r3, [r4, #0]
 80a1524:	42ab      	cmp	r3, r5
 80a1526:	bf0c      	ite	eq
 80a1528:	2201      	moveq	r2, #1
 80a152a:	2200      	movne	r2, #0
 80a152c:	4b0f      	ldr	r3, [pc, #60]	; (80a156c <module_user_init_hook+0x58>)
 80a152e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1530:	d002      	beq.n	80a1538 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a1532:	f7ff ffbb 	bl	80a14ac <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1536:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1538:	f7fe fec6 	bl	80a02c8 <HAL_RNG_GetRandomNumber>
 80a153c:	4604      	mov	r4, r0
    srand(seed);
 80a153e:	f000 f92f 	bl	80a17a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1542:	4b0b      	ldr	r3, [pc, #44]	; (80a1570 <module_user_init_hook+0x5c>)
 80a1544:	b113      	cbz	r3, 80a154c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a1546:	4620      	mov	r0, r4
 80a1548:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a154c:	2100      	movs	r1, #0
 80a154e:	4808      	ldr	r0, [pc, #32]	; (80a1570 <module_user_init_hook+0x5c>)
 80a1550:	f7fe fff8 	bl	80a0544 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1558:	2100      	movs	r1, #0
 80a155a:	4806      	ldr	r0, [pc, #24]	; (80a1574 <module_user_init_hook+0x60>)
 80a155c:	f7fe bfc6 	b.w	80a04ec <system_ctrl_set_app_request_handler>
 80a1560:	40024000 	.word	0x40024000
 80a1564:	080a142d 	.word	0x080a142d
 80a1568:	9a271c1e 	.word	0x9a271c1e
 80a156c:	20000510 	.word	0x20000510
 80a1570:	00000000 	.word	0x00000000
 80a1574:	080a14dd 	.word	0x080a14dd

080a1578 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a1578:	b510      	push	{r4, lr}
 80a157a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a157c:	6880      	ldr	r0, [r0, #8]
 80a157e:	b108      	cbz	r0, 80a1584 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a1580:	f7fe fe9a 	bl	80a02b8 <os_mutex_recursive_destroy>
 80a1584:	4620      	mov	r0, r4
 80a1586:	bd10      	pop	{r4, pc}

080a1588 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a1588:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a158a:	b570      	push	{r4, r5, r6, lr}
 80a158c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a158e:	d901      	bls.n	80a1594 <pinAvailable+0xc>
    return false;
 80a1590:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a1592:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1594:	f1a0 030d 	sub.w	r3, r0, #13
 80a1598:	2b02      	cmp	r3, #2
 80a159a:	d90b      	bls.n	80a15b4 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a159c:	2801      	cmp	r0, #1
 80a159e:	d826      	bhi.n	80a15ee <pinAvailable+0x66>
 80a15a0:	f000 f88e 	bl	80a16c0 <_Z19__fetch_global_Wirev>
 80a15a4:	2100      	movs	r1, #0
 80a15a6:	7c00      	ldrb	r0, [r0, #16]
 80a15a8:	f7fe fee6 	bl	80a0378 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a15ac:	f080 0001 	eor.w	r0, r0, #1
 80a15b0:	b2c0      	uxtb	r0, r0
 80a15b2:	e7ee      	b.n	80a1592 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a15b4:	4e13      	ldr	r6, [pc, #76]	; (80a1604 <pinAvailable+0x7c>)
 80a15b6:	7831      	ldrb	r1, [r6, #0]
 80a15b8:	f3bf 8f5b 	dmb	ish
 80a15bc:	f011 0501 	ands.w	r5, r1, #1
 80a15c0:	d10f      	bne.n	80a15e2 <pinAvailable+0x5a>
 80a15c2:	4630      	mov	r0, r6
 80a15c4:	f7fe fd6d 	bl	80a00a2 <__cxa_guard_acquire>
 80a15c8:	b158      	cbz	r0, 80a15e2 <pinAvailable+0x5a>
 80a15ca:	4629      	mov	r1, r5
 80a15cc:	480e      	ldr	r0, [pc, #56]	; (80a1608 <pinAvailable+0x80>)
 80a15ce:	f7ff fc83 	bl	80a0ed8 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a15d2:	4630      	mov	r0, r6
 80a15d4:	f7fe fd6a 	bl	80a00ac <__cxa_guard_release>
 80a15d8:	4a0c      	ldr	r2, [pc, #48]	; (80a160c <pinAvailable+0x84>)
 80a15da:	490d      	ldr	r1, [pc, #52]	; (80a1610 <pinAvailable+0x88>)
 80a15dc:	480a      	ldr	r0, [pc, #40]	; (80a1608 <pinAvailable+0x80>)
 80a15de:	f000 f8af 	bl	80a1740 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a15e2:	4b09      	ldr	r3, [pc, #36]	; (80a1608 <pinAvailable+0x80>)
 80a15e4:	7818      	ldrb	r0, [r3, #0]
 80a15e6:	f7fe fee1 	bl	80a03ac <hal_spi_is_enabled>
 80a15ea:	2800      	cmp	r0, #0
 80a15ec:	d1d0      	bne.n	80a1590 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a15ee:	3c12      	subs	r4, #18
 80a15f0:	2c01      	cmp	r4, #1
 80a15f2:	d805      	bhi.n	80a1600 <pinAvailable+0x78>
 80a15f4:	f7ff fd76 	bl	80a10e4 <_Z22__fetch_global_Serial1v>
 80a15f8:	7c00      	ldrb	r0, [r0, #16]
 80a15fa:	f7fe ff0f 	bl	80a041c <hal_usart_is_enabled>
 80a15fe:	e7d5      	b.n	80a15ac <pinAvailable+0x24>
  return true; // 'pin' is available
 80a1600:	2001      	movs	r0, #1
 80a1602:	e7c6      	b.n	80a1592 <pinAvailable+0xa>
 80a1604:	20000518 	.word	0x20000518
 80a1608:	2000051c 	.word	0x2000051c
 80a160c:	20000070 	.word	0x20000070
 80a1610:	080a1579 	.word	0x080a1579

080a1614 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1614:	2817      	cmp	r0, #23
{
 80a1616:	b538      	push	{r3, r4, r5, lr}
 80a1618:	4604      	mov	r4, r0
 80a161a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a161c:	d80a      	bhi.n	80a1634 <pinMode+0x20>
 80a161e:	29ff      	cmp	r1, #255	; 0xff
 80a1620:	d008      	beq.n	80a1634 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a1622:	f7ff ffb1 	bl	80a1588 <pinAvailable>
 80a1626:	b128      	cbz	r0, 80a1634 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a1628:	4629      	mov	r1, r5
 80a162a:	4620      	mov	r0, r4
}
 80a162c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a1630:	f7fe be5a 	b.w	80a02e8 <HAL_Pin_Mode>
}
 80a1634:	bd38      	pop	{r3, r4, r5, pc}

080a1636 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1636:	b538      	push	{r3, r4, r5, lr}
 80a1638:	4604      	mov	r4, r0
 80a163a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a163c:	f7fe fe5c 	bl	80a02f8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1640:	28ff      	cmp	r0, #255	; 0xff
 80a1642:	d010      	beq.n	80a1666 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a1644:	2806      	cmp	r0, #6
 80a1646:	d804      	bhi.n	80a1652 <digitalWrite+0x1c>
 80a1648:	234d      	movs	r3, #77	; 0x4d
 80a164a:	fa23 f000 	lsr.w	r0, r3, r0
 80a164e:	07c3      	lsls	r3, r0, #31
 80a1650:	d409      	bmi.n	80a1666 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1652:	4620      	mov	r0, r4
 80a1654:	f7ff ff98 	bl	80a1588 <pinAvailable>
 80a1658:	b128      	cbz	r0, 80a1666 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a165a:	4629      	mov	r1, r5
 80a165c:	4620      	mov	r0, r4
}
 80a165e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a1662:	f7fe be51 	b.w	80a0308 <HAL_GPIO_Write>
}
 80a1666:	bd38      	pop	{r3, r4, r5, pc}

080a1668 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1668:	b510      	push	{r4, lr}
 80a166a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a166c:	f7fe fe44 	bl	80a02f8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a1670:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a1672:	b2db      	uxtb	r3, r3
 80a1674:	2b01      	cmp	r3, #1
 80a1676:	d908      	bls.n	80a168a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1678:	4620      	mov	r0, r4
 80a167a:	f7ff ff85 	bl	80a1588 <pinAvailable>
 80a167e:	b120      	cbz	r0, 80a168a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1680:	4620      	mov	r0, r4
}
 80a1682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a1686:	f7fe be47 	b.w	80a0318 <HAL_GPIO_Read>
}
 80a168a:	2000      	movs	r0, #0
 80a168c:	bd10      	pop	{r4, pc}
	...

080a1690 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a1690:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a1692:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1694:	2520      	movs	r5, #32
 80a1696:	8043      	strh	r3, [r0, #2]
 80a1698:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a169a:	4e08      	ldr	r6, [pc, #32]	; (80a16bc <_Z17acquireWireBufferv+0x2c>)
{
 80a169c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a169e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a16a0:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a16a2:	6085      	str	r5, [r0, #8]
 80a16a4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a16a6:	4628      	mov	r0, r5
 80a16a8:	f000 f851 	bl	80a174e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a16ac:	4631      	mov	r1, r6
	};
 80a16ae:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a16b0:	4628      	mov	r0, r5
 80a16b2:	f000 f84c 	bl	80a174e <_ZnajRKSt9nothrow_t>
	};
 80a16b6:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a16b8:	4620      	mov	r0, r4
 80a16ba:	bd70      	pop	{r4, r5, r6, pc}
 80a16bc:	080a19cc 	.word	0x080a19cc

080a16c0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a16c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a16c2:	4d0f      	ldr	r5, [pc, #60]	; (80a1700 <_Z19__fetch_global_Wirev+0x40>)
{
 80a16c4:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a16c6:	7829      	ldrb	r1, [r5, #0]
 80a16c8:	f3bf 8f5b 	dmb	ish
 80a16cc:	f011 0401 	ands.w	r4, r1, #1
 80a16d0:	d113      	bne.n	80a16fa <_Z19__fetch_global_Wirev+0x3a>
 80a16d2:	4628      	mov	r0, r5
 80a16d4:	f7fe fce5 	bl	80a00a2 <__cxa_guard_acquire>
 80a16d8:	b178      	cbz	r0, 80a16fa <_Z19__fetch_global_Wirev+0x3a>
 80a16da:	a801      	add	r0, sp, #4
 80a16dc:	f7ff ffd8 	bl	80a1690 <_Z17acquireWireBufferv>
 80a16e0:	4621      	mov	r1, r4
 80a16e2:	aa01      	add	r2, sp, #4
 80a16e4:	4807      	ldr	r0, [pc, #28]	; (80a1704 <_Z19__fetch_global_Wirev+0x44>)
 80a16e6:	f7ff fab5 	bl	80a0c54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a16ea:	4628      	mov	r0, r5
 80a16ec:	f7fe fcde 	bl	80a00ac <__cxa_guard_release>
 80a16f0:	4a05      	ldr	r2, [pc, #20]	; (80a1708 <_Z19__fetch_global_Wirev+0x48>)
 80a16f2:	4906      	ldr	r1, [pc, #24]	; (80a170c <_Z19__fetch_global_Wirev+0x4c>)
 80a16f4:	4803      	ldr	r0, [pc, #12]	; (80a1704 <_Z19__fetch_global_Wirev+0x44>)
 80a16f6:	f000 f823 	bl	80a1740 <__aeabi_atexit>
	return wire;
}
 80a16fa:	4802      	ldr	r0, [pc, #8]	; (80a1704 <_Z19__fetch_global_Wirev+0x44>)
 80a16fc:	b007      	add	sp, #28
 80a16fe:	bd30      	pop	{r4, r5, pc}
 80a1700:	2000052c 	.word	0x2000052c
 80a1704:	20000530 	.word	0x20000530
 80a1708:	20000070 	.word	0x20000070
 80a170c:	080a0bfd 	.word	0x080a0bfd

080a1710 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1710:	2300      	movs	r3, #0
 80a1712:	b513      	push	{r0, r1, r4, lr}
 80a1714:	4c07      	ldr	r4, [pc, #28]	; (80a1734 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1716:	461a      	mov	r2, r3
 80a1718:	4619      	mov	r1, r3
 80a171a:	4620      	mov	r0, r4
 80a171c:	9300      	str	r3, [sp, #0]
 80a171e:	f7ff fb03 	bl	80a0d28 <_ZN9IPAddressC1Ehhhh>
 80a1722:	4620      	mov	r0, r4
 80a1724:	4a04      	ldr	r2, [pc, #16]	; (80a1738 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1726:	4905      	ldr	r1, [pc, #20]	; (80a173c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1728:	b002      	add	sp, #8
 80a172a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a172e:	f000 b807 	b.w	80a1740 <__aeabi_atexit>
 80a1732:	bf00      	nop
 80a1734:	20000544 	.word	0x20000544
 80a1738:	20000070 	.word	0x20000070
 80a173c:	080a0c79 	.word	0x080a0c79

080a1740 <__aeabi_atexit>:
 80a1740:	460b      	mov	r3, r1
 80a1742:	4601      	mov	r1, r0
 80a1744:	4618      	mov	r0, r3
 80a1746:	f000 b807 	b.w	80a1758 <__cxa_atexit>

080a174a <_ZdlPvj>:
 80a174a:	f7fe bca8 	b.w	80a009e <_ZdlPv>

080a174e <_ZnajRKSt9nothrow_t>:
 80a174e:	f7fe bca4 	b.w	80a009a <_Znaj>

080a1752 <_ZSt25__throw_bad_function_callv>:
 80a1752:	b508      	push	{r3, lr}
 80a1754:	f7fe ff66 	bl	80a0624 <abort>

080a1758 <__cxa_atexit>:
 80a1758:	b510      	push	{r4, lr}
 80a175a:	4604      	mov	r4, r0
 80a175c:	4804      	ldr	r0, [pc, #16]	; (80a1770 <__cxa_atexit+0x18>)
 80a175e:	4613      	mov	r3, r2
 80a1760:	b120      	cbz	r0, 80a176c <__cxa_atexit+0x14>
 80a1762:	460a      	mov	r2, r1
 80a1764:	2002      	movs	r0, #2
 80a1766:	4621      	mov	r1, r4
 80a1768:	f3af 8000 	nop.w
 80a176c:	bd10      	pop	{r4, pc}
 80a176e:	bf00      	nop
 80a1770:	00000000 	.word	0x00000000

080a1774 <memcpy>:
 80a1774:	440a      	add	r2, r1
 80a1776:	4291      	cmp	r1, r2
 80a1778:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a177c:	d100      	bne.n	80a1780 <memcpy+0xc>
 80a177e:	4770      	bx	lr
 80a1780:	b510      	push	{r4, lr}
 80a1782:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1786:	4291      	cmp	r1, r2
 80a1788:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a178c:	d1f9      	bne.n	80a1782 <memcpy+0xe>
 80a178e:	bd10      	pop	{r4, pc}

080a1790 <memset>:
 80a1790:	4603      	mov	r3, r0
 80a1792:	4402      	add	r2, r0
 80a1794:	4293      	cmp	r3, r2
 80a1796:	d100      	bne.n	80a179a <memset+0xa>
 80a1798:	4770      	bx	lr
 80a179a:	f803 1b01 	strb.w	r1, [r3], #1
 80a179e:	e7f9      	b.n	80a1794 <memset+0x4>

080a17a0 <srand>:
 80a17a0:	b538      	push	{r3, r4, r5, lr}
 80a17a2:	4b0d      	ldr	r3, [pc, #52]	; (80a17d8 <srand+0x38>)
 80a17a4:	4604      	mov	r4, r0
 80a17a6:	681d      	ldr	r5, [r3, #0]
 80a17a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a17aa:	b97b      	cbnz	r3, 80a17cc <srand+0x2c>
 80a17ac:	2018      	movs	r0, #24
 80a17ae:	f7fe ff21 	bl	80a05f4 <malloc>
 80a17b2:	4a0a      	ldr	r2, [pc, #40]	; (80a17dc <srand+0x3c>)
 80a17b4:	4b0a      	ldr	r3, [pc, #40]	; (80a17e0 <srand+0x40>)
 80a17b6:	63a8      	str	r0, [r5, #56]	; 0x38
 80a17b8:	e9c0 2300 	strd	r2, r3, [r0]
 80a17bc:	4b09      	ldr	r3, [pc, #36]	; (80a17e4 <srand+0x44>)
 80a17be:	2201      	movs	r2, #1
 80a17c0:	6083      	str	r3, [r0, #8]
 80a17c2:	230b      	movs	r3, #11
 80a17c4:	8183      	strh	r3, [r0, #12]
 80a17c6:	2300      	movs	r3, #0
 80a17c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a17cc:	2200      	movs	r2, #0
 80a17ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a17d0:	611c      	str	r4, [r3, #16]
 80a17d2:	615a      	str	r2, [r3, #20]
 80a17d4:	bd38      	pop	{r3, r4, r5, pc}
 80a17d6:	bf00      	nop
 80a17d8:	2000000c 	.word	0x2000000c
 80a17dc:	abcd330e 	.word	0xabcd330e
 80a17e0:	e66d1234 	.word	0xe66d1234
 80a17e4:	0005deec 	.word	0x0005deec

080a17e8 <strdup>:
 80a17e8:	4b02      	ldr	r3, [pc, #8]	; (80a17f4 <strdup+0xc>)
 80a17ea:	4601      	mov	r1, r0
 80a17ec:	6818      	ldr	r0, [r3, #0]
 80a17ee:	f000 b803 	b.w	80a17f8 <_strdup_r>
 80a17f2:	bf00      	nop
 80a17f4:	2000000c 	.word	0x2000000c

080a17f8 <_strdup_r>:
 80a17f8:	b570      	push	{r4, r5, r6, lr}
 80a17fa:	4604      	mov	r4, r0
 80a17fc:	4608      	mov	r0, r1
 80a17fe:	460d      	mov	r5, r1
 80a1800:	f000 f80d 	bl	80a181e <strlen>
 80a1804:	1c46      	adds	r6, r0, #1
 80a1806:	4631      	mov	r1, r6
 80a1808:	4620      	mov	r0, r4
 80a180a:	f7fe ff13 	bl	80a0634 <_malloc_r>
 80a180e:	4604      	mov	r4, r0
 80a1810:	b118      	cbz	r0, 80a181a <_strdup_r+0x22>
 80a1812:	4632      	mov	r2, r6
 80a1814:	4629      	mov	r1, r5
 80a1816:	f7ff ffad 	bl	80a1774 <memcpy>
 80a181a:	4620      	mov	r0, r4
 80a181c:	bd70      	pop	{r4, r5, r6, pc}

080a181e <strlen>:
 80a181e:	4603      	mov	r3, r0
 80a1820:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1824:	2a00      	cmp	r2, #0
 80a1826:	d1fb      	bne.n	80a1820 <strlen+0x2>
 80a1828:	1a18      	subs	r0, r3, r0
 80a182a:	3801      	subs	r0, #1
 80a182c:	4770      	bx	lr

080a182e <link_code_end>:
	...

080a1830 <dynalib_user>:
 80a1830:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a1840:	0000 0000 4e49 5254 4455 5245 4120 454c     ....INTRUDER ALE
 80a1850:	5452 0021 6e69 7274 6475 7265 6c5f 676f     RT!.intruder_log
 80a1860:	3400 3033 3230 3038 3030 3434 3337 3336     .430028000447363
 80a1870:	3333 3339 3334 3336 0038 6e69 7274 6475     339343638.intrud
 80a1880:	7265 615f 656c 7472 0000 0000               er_alert....

080a188c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a1894:	0683 080a 0689 080a 06d9 080a 0697 080a     ................
 80a18a4:	0685 080a                                   ....

080a18a8 <_ZTV7TwoWire>:
	...
 80a18b0:	0bfd 080a 0c47 080a 0c1f 080a 0bff 080a     ....G...........
 80a18c0:	0c27 080a 0c2f 080a 0c37 080a 0c3f 080a     '.../...7...?...

080a18d0 <_ZTV9IPAddress>:
	...
 80a18d8:	0c89 080a 0c79 080a 0c7b 080a 7061 0070     ....y...{...app.

080a18e8 <_ZTVN5spark12NetworkClassE>:
	...
 80a18f0:	0d51 080a 0d5b 080a 0d65 080a 0d6f 080a     Q...[...e...o...
 80a1900:	0d79 080a 0d85 080a 0d91 080a 0d9d 080a     y...............
 80a1910:	0da5 080a 0daf 080a 0db9 080a 5925 252d     ............%Y-%
 80a1920:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a1930:	7361 7463 6d69 0065                         asctime.

080a1938 <_ZTV11USARTSerial>:
	...
 80a1940:	1041 080a 10a9 080a 1085 080a 0e1d 080a     A...............
 80a1950:	1055 080a 1071 080a 1063 080a 107f 080a     U...q...c.......
 80a1960:	1043 080a 1047 080a                         C...G...

080a1968 <_ZTV9USBSerial>:
	...
 80a1970:	1139 080a 119f 080a 1177 080a 0e1d 080a     9.......w.......
 80a1980:	1169 080a 113b 080a 114b 080a 1199 080a     i...;...K.......
 80a1990:	115b 080a 1135 080a                         [...5...

080a1998 <_ZTVN5spark9WiFiClassE>:
	...
 80a19a0:	136f 080a 1365 080a 135b 080a 12cd 080a     o...e...[.......
 80a19b0:	134f 080a 1343 080a 1337 080a 132f 080a     O...C...7.../...
 80a19c0:	1325 080a 131b 080a 12d7 080a               %...........

080a19cc <_ZSt7nothrow>:
	...

080a19cd <link_const_variable_data_end>:
 80a19cd:	00          	.byte	0x00
	...

080a19d0 <link_constructors_location>:
 80a19d0:	080a029d 	.word	0x080a029d
 80a19d4:	080a0d41 	.word	0x080a0d41
 80a19d8:	080a0e09 	.word	0x080a0e09
 80a19dc:	080a0ebd 	.word	0x080a0ebd
 80a19e0:	080a0ff1 	.word	0x080a0ff1
 80a19e4:	080a102d 	.word	0x080a102d
 80a19e8:	080a1379 	.word	0x080a1379
 80a19ec:	080a1711 	.word	0x080a1711
